#!/bin/bash

# New script for using calamares.
#
# Note that this script can be called directly from the terminal,
# or it can be called from the Welcome app.

GUIDIE() {
    # show error in the terminal and log
    echo "$progname: $1" | sed -e 's|<tt>||g' -e 's|</tt>||g'  # remove some formatting tags

    # show the error in a yad window
    local cmd=(
        eos_yad --form --title="Error detected" --text="<tt>$progname</tt>:\n$1\n"
        --image=dialog-error
        --button=yad-quit:1
    )
    "${cmd[@]}"

    exit 1
}

### Provides the install log contents. ###
FollowFile() {
    local tailfile="$1"
    local term_title="$2"
    local xpos="$3"
    local ypos="$4"

    xfce4-terminal -T "$term_title" --geometry=120x20+$xpos+$ypos -x tail -f "$tailfile" &
}

### Provides the pacman log. ###
CatchChrootedPacmanLog() {
    local pacmanlog=""
    local lockfile="$HOME/.$progname.lck"

    # wait until pacman.log is available in the chrooted system, then follow the log in background
    while true ; do
        sleep 2
        pacmanlog="$(/usr/bin/ls -1 /tmp/calamares-root-*/var/log/pacman.log 2>/dev/null | /usr/bin/tail -n 1)"
        if [ -n "$pacmanlog" ] ; then
            # pacman.log detected!
            [ -r "$lockfile" ] && return
            /usr/bin/touch "$lockfile"
            FollowFile "$pacmanlog" "Pacman log" 400 50
            break
        fi
    done
}

### Starts logging into the install log. ###
InstallLog_Start() {
    local preprelogfile="$(eos-select-file-server --logfilename)"
    local ISO_version=$(cat /usr/lib/endeavouros-release | cut -d'=' -f2)
    local calamares_version="$(pacman -Q calamares 2>/dev/null | awk '{print $NF}')"

    [ -n "$calamares_version"] || calamares_version="$(pacman -Q calamares 2>/dev/null | awk '{print $NF}')"  # this line is probably not needed

    cat <<EOF > $log
########## $log by $progname
########## Started (UTC): $(date -u "+%x %X")
########## Install mode: $mode
########## ISO version: $ISO_version
########## Calamares version: $calamares_version

## >>> Preliminary log before starting calamares:
EOF
    if [ -r $preprelogfile ] ; then
        cat <<EOF >> $log
$(cat $preprelogfile)

EOF
    fi
    cat <<EOF >> $log
$(cat "$prelogfile")
## <<< End of preliminary log.

EOF
    rm -f "$prelogfile"
    rm -f "$preprelogfile"

    if [ "$ShowInstallLog" = "TRUE" ] ; then
        FollowFile "$log" "Install log" 20 20
    fi
}

### Starts calamares and runs it in the background. ###
Calamares_Start() {
    pkexec calamares -style kvantum -D8 >> $log &
}

### Dialog that asks for the online or offline edition. ###
AskMode() {
    local inet_no="Internet connection is not required"
    local inet_yes="Internet connection is required"
    local ret=0
    local official_online="Online"
    local official_offline="Offline"
    local txt

    txt=""
    txt+="$(ltr cal_info3)"
    txt+="$(ltr cal_info2)"

    local cmd=(
        eos_yad --form --title="$(ltr cal_choose)"
        --image=system-os-installer
        --text="$txt"
        --buttons-layout=spread
        --button="Online!!Vanilla theming, internet required":12
        --button="Offline!!Xfce, EndeavourOS theming, internet not required":14
    )
    if [ 0 -eq 1 ] ; then
    cmd+=(
        --field=' Install Log on Terminal!Show overall log about install on a terminal':CHK $ShowInstallLog
        #--field=' Pacman Log on Terminal!Show package management log on a terminal':CHK      $ShowPacmanLog
        --field='':LBL ""
    )
    fi

    local result
    result="$("${cmd[@]}")"       # ask mode from the user

    ret=$?

    # set the install mode, or exit on error
    case "$ret" in
        11|12) mode=online ;;
        13|14) mode=offline ;;
        252|*) exit $ret ;;
    esac
    #ShowInstallLog=$(echo "$result" | cut -d'|' -f1)
    #ShowPacmanLog=$( echo "$result" | cut -d'|' -f2)
}

### Starts the calamares installer process and logging. ###
InstallWithLogs() {
    InstallLog_Start
    Calamares_Start

    if [ "$ShowPacmanLog" = "FALSE" ] ; then
        sleep 5
        return
    fi

    case "$mode" in
        online | community)
            CatchChrootedPacmanLog
            ;;
        offline)
            # no pacman log for offline install
            CatchChrootedPacmanLog
            ;;
    esac
}

run_hotfix_start() {
    local file=hotfix-start.bash
    local url=$(eos-github2gitlab https://raw.githubusercontent.com/endeavouros-team/ISO-hotfixes/main/$file)

    if Wget2Curl --timeout=30 -q -O "$workdir/$file" "$url" ; then
        sudo bash "$workdir/$file" >> "$prelogfile"
        PreLog "Hotfixes definition file from $url executed."
    else
        PreLog "Fetching $url failed!"
    fi
}

BootloaderId() {
    local blid="endeavouros-$(shuf -i 1000-9999 -n1)"
    PreLog "New bootloader id: '$blid'"
    sudo sed -i $cfolder/modules/bootloader.conf -e "s|^efiBootloaderId:.*|efiBootloaderId: \"$blid\"|"
}

PreLog() {
    # Some logs before we can use endeavour-install.log.
    echo "==> $1" >> "$prelogfile"
}

CheckUserPkglist() {
    local userlistfile="$Home/user_pkglist.txt"

    if [ -r "$userlistfile" ] ; then
        # Remove comments (sed), empty lines (grep), and trim lines from spaces (sed):
        local user_pkgs=$(cat "$userlistfile" | sed 's|\([^#]*\)#.*|\1|' | grep -Pv "^[ \t]*$" | sed -e 's|^[ \t]*||' -e 's|[ \t]*$||')
        local up up2
        local failed=()
        local aur=()
        local has_spaces=no
        local txt=""

        # allow only one pkgname per line
        readarray -t user_pkgs <<< $(echo "$user_pkgs")

        for up in "${user_pkgs[@]}" ; do
            [ -n "$up" ] || continue
            if ! pacman -Si "$up" >& /dev/null ; then
                if [ "$up" != "$(echo "$up" | sed 's|[ \t]||g')" ] ; then
                    has_spaces=yes
                fi
                up2="\t'$up'"
                if yay -Sia "$up" >& /dev/null ; then
                    aur+=("$up2")
                else
                    failed+=("$up2")
                fi
            fi
        done

        if [ -n "$failed" ] ; then
            txt+="The following package names listed in <b>$userlistfile</b> do not exist:\n$(printf "<tt>%s</tt>\n" "${failed[@]}")\n\n"
        fi
        if [ -n "$aur" ] ; then
            txt+="AUR packages listed in <b>$userlistfile</b> are not supported:\n$(printf "<tt>%s</tt>\n" "${aur[@]}")\n\n"
        fi
        if [ "$has_spaces" = "yes" ] ; then
            txt+="Note that only one package name per line is allowed and a package name cannot include white space characters.\n"
        fi
        if [ -n "$txt" ] ; then
            GUIDIE "$txt"
        fi
    fi
}


###  Everything starts in the Main function. ###
Main() {
    source /usr/share/endeavouros/scripts/eos-script-lib-yad || exit 1
    source /usr/share/endeavouros/scripts/translations.bash || exit 1
    export -f eos_yad

    local lang="$1"
    local mode="$2"                             # 'community' or '' (empty)
    local ShowInstallLog="FALSE"                # TRUE --> show install log terminal window
    local ShowPacmanLog="FALSE"                 # TRUE --> show pacman  log terminal window
    local progname="$(basename "$0")"           # for help and messages
    local Home=/home/liveuser                   # liveuser's home folder
    local log=$Home/endeavour-install.log       # install log
    local cfolder=/etc/calamares                # folder for calamares configuration files
    local all_sudo_commands=":"                 # all root commands will be collected to this variable!
    local workdir=""
    local prelogfile=""

    CheckUserPkglist

    workdir="$Home/work.$progname.xyz"
    mkdir -p "$workdir"

    prelogfile="$workdir/preliminary.log"
    rm -f "$prelogfile"

    BootloaderId

    _init_translations $lang || GUIDIE "language init failed"

    case "$mode" in
        "" | test) AskMode ;;    # ask the value for $mode
    esac

    if eos-connection-checker ; then
        run_hotfix_start              # run possible hotfixes before copying settings.conf file
    fi

    case "$mode" in
        online | offline | community)
            sudo cp $cfolder/settings_$mode.conf $cfolder/settings.conf
            PreLog "File settings.conf updated."
            ;;
        *)
            GUIDIE "unsupported mode '$mode'"
            ;;
    esac

    if [ "$I_am_only_testing" = "true" ] ; then
        return
    fi

    # finally: run calamares with logs (install, pacman)
    InstallWithLogs
}

Main "$@"
