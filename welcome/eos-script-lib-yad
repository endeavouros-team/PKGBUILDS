#!/bin/bash
#
# EndeavourOS bash scripts "library". Functions using 'yad'.
#
# - ALL FUNCTIONS HERE START WITH "eos_yad_" AND ARE EXPORTED.
# - NO GLOBAL VARIABLES ARE USED NOR PROVIDED.
#
# User MUST declare the following exports in the *using* bash code:
#
# export -f eos_yad
# export -f eos_yad_terminal
# export -f eos_yad_check_internet_connection
# export -f eos_yad_GetArgVal
# export -f eos_yad_RunCmdTermBash
# export -f eos_yad_problem
# export -f eos_yad_DIE
# export -f eos_yad_WARN
#
# export -f eos_yad__detectDE
# export -f eos_yad_GetDesktopName
#
# The two last functions above do not use yad.

source /etc/eos-script-lib-yad.conf      # for EOS_ROOTER and other configs

export EOS_WICON=/usr/share/endeavouros/EndeavourOS-icon.png

eos_yad() {
    GDK_BACKEND=x11 /usr/bin/yad --window-icon=$EOS_WICON "$@"
}
#export -f eos_yad

eos_yad_terminal() {
    local conf=/etc/eos-script-lib-yad.conf
    if [ -r $conf ] ; then
        source $conf
        if [ -n "$EOS_YAD_TERMINAL" ] ; then
            if [ -x /usr/bin/"$EOS_YAD_TERMINAL" ] || [ -x "$EOS_YAD_TERMINAL" ] ; then
                echo "$EOS_YAD_TERMINAL"
                return
            fi
            echo "Sorry, terminal program '$EOS_YAD_TERMINAL' is not available. Please check your configuration file $conf." | \
                eos_yad --text-info --title=Warning --height=100 --width=500 --wrap --button=yad-ok:0
        fi
    fi

    # Show a terminal that is capable of supporting option -e properly. Empty if not found.
    # Requires: yad
    #
    # These terminal programs are known not to work with this program:
    #     -
    # The following terminals are known to work:
    local suitable_terminals=(
        xfce4-terminal
        konsole
        gnome-terminal
        mate-terminal
        lxterminal
        deepin-terminal
        terminator
        qterminal
        tilix
        termite
        xterm
        kitty
    )
    local eos_terminal_prog=""
    local xx

    for xx in "${suitable_terminals[@]}" ; do
        if [ -x "/usr/bin/$xx" ] ; then
            eos_terminal_prog="/usr/bin/$xx"
            echo "$eos_terminal_prog"
            return 0
        fi
    done

    printf "%s\n    %s\n%s" \
           "Sorry, none of the terminal programs:" \
           "${suitable_terminals[*]}" \
           "is installed. Some features may not work as expected." \
        | eos_yad --text-info \
                  --title="Warning" --height=200 --width=700 --wrap --button=yad-ok:0
    return 1
}

eos_yad_check_internet_connection() {
    local verbose="$1"          # yes|verbose = show dialog, otherwise don't show dialog
    local waitrounds="$2"       # try max $waitrounds times for a connection, test once per $onewait
    local onewait="$3"          # time to wait in one waiting round
    local caller="$4"           # who is calling this function (often empty)
    local ix
    local title="Warning"

    test -z "$verbose"    && verbose=no
    test -z "$waitrounds" && waitrounds=5
    test -z "$onewait"    && onewait=1s

    if [ -n "$caller" ] ; then
        title+=" at $caller"
    fi

    for ((ix=0; ix<waitrounds; ix++)) ; do
        curl -s --connect-timeout 8 https://8.8.8.8 >/dev/null && return 0   # is connected
        sleep $onewait
    done

    curl -s --connect-timeout 8 https://8.8.8.8 >/dev/null || {
        case "$verbose" in
            [yY]*|1|true|TRUE|True|on|enable*|verbose)
                echo "No internet connection!" | \
                    eos_yad --text-info --title="$title" \
                            --height=100 --width=300 --justify=center --wrap \
                            --button=yad-quit:1 \
                            --button=" Continue anyway!go-next!Don't stop me now":0
                ;;
            *)
                return 1
                ;;
        esac
    }
}

eos_yad_GetArgVal() {
    echo "${1#*=}"
    #e cho "$1" | cut -d '=' -f 2
}

eos_yad_RunCmdTermBash() {
    local cmd="$1"
    local prompt="$2"
    local termopts="$3"

    local term="$(eos_yad_terminal)"
    test -n "$term" || return 1

    local tmpfile=$(mktemp)

    echo "#!/bin/bash"                                   >> $tmpfile
    test -n "$prompt" && echo "echo $prompt"             >> $tmpfile
    echo "$cmd"                                          >> $tmpfile
    case "$term" in
        */deepin-terminal) ;;
        *)
            echo "read -p 'Press ENTER to close this window: '"  >> $tmpfile
            ;;
    esac
    echo "rm -f $tmpfile"                                >> $tmpfile

    chmod +x $tmpfile
    $term $termopts -e $tmpfile

    # The following DOES NOT WORK with gnome-terminal:
    #echo "Deleting '$tmpfile'."
    #rm -f $tmpfile
}

eos_yad_problem() {
    local title="$1"
    shift
    eos_yad --text-info --title="$title" --tail --wrap --image=error \
            --width=700 --height=500 --button=yad-quit:0 "$@"
}

eos_yad_DIE() {
    # This function is only for small messages.
    # The local Usage can be used only if it is
    #  - defined before sourcing this file
    #  - exported

    local msg="$1"
    local title="Error"
    shift
    while true ; do
        echo "$msg"
        # run Usage function if available (usually is not ...)
        test -n "$(declare -F | grep -w '^declare -f Usage$')" && Usage
        break
    done | eos_yad_problem "$title" "$@"
    exit 1
}

eos_yad_WARN() {
    local msg="$1"
    local title="Warning"
    shift
    echo "$msg" | eos_yad_problem "$title" --image=dialog-warning "$@"
}

# Function detectDE is copied from: https://cgit.freedesktop.org/xdg/xdg-utils/tree/scripts/xdg-utils-common.in

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

eos_yad__detectDE()
{
    # see https://bugs.freedesktop.org/show_bug.cgi?id=34164
    unset GREP_OPTIONS

    if [ -n "${XDG_CURRENT_DESKTOP}" ]; then
      case "${XDG_CURRENT_DESKTOP}" in
         # only recently added to menu-spec, pre-spec X- still in use
         Budgie*)
           DE=BUDGIE
           ;;
         Cinnamon|X-Cinnamon)
           DE=cinnamon;
           ;;
         ENLIGHTENMENT)
           DE=enlightenment;
           ;;
         # GNOME, GNOME-Classic:GNOME, or GNOME-Flashback:GNOME
         GNOME*)
           DE=gnome;
           ;;
         KDE)
           DE=kde;
           ;;
         DEEPIN|Deepin|deepin)
           DE=deepin;
           ;;
         LXDE)
           DE=lxde;
           ;;
         LXQt)
           DE=lxqt;
           ;;
         MATE)
           DE=mate;
           ;;
         XFCE)
           DE=xfce
           ;;
         X-Generic)
           DE=generic
           ;;
      esac
    fi

    if [ x"$DE" = x"" ]; then
      # classic fallbacks
      if [ x"$KDE_FULL_SESSION" != x"" ]; then DE=kde;
      elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
      elif [ x"$MATE_DESKTOP_SESSION_ID" != x"" ]; then DE=mate;
      elif `dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1` ; then DE=gnome;
      elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
      elif xprop -root 2> /dev/null | grep -i '^xfce_desktop_window' >/dev/null 2>&1; then DE=xfce
      elif echo $DESKTOP | grep -q '^Enlightenment'; then DE=enlightenment;
      elif [ x"$LXQT_SESSION_CONFIG" != x"" ]; then DE=lxqt;
      fi
    fi

    if [ x"$DE" = x"" ]; then
      # fallback to checking $DESKTOP_SESSION
      case "$DESKTOP_SESSION" in
         gnome)
           DE=gnome;
           ;;
         LXDE|Lubuntu)
           DE=lxde; 
           ;;
         MATE)
           DE=mate;
           ;;
         xfce|xfce4|'Xfce Session')
           DE=xfce;
           ;;
      esac
    fi

    if [ x"$DE" = x"" ]; then
      # fallback to uname output for other platforms
      case "$(uname 2>/dev/null)" in 
        CYGWIN*)
          DE=cygwin;
          ;;
        Darwin)
          DE=darwin;
          ;;
      esac
    fi

    if [ x"$DE" = x"gnome" ]; then
      # gnome-default-applications-properties is only available in GNOME 2.x
      # but not in GNOME 3.x
      which gnome-default-applications-properties > /dev/null 2>&1  || DE="gnome3"
    fi

    if [ -f "$XDG_RUNTIME_DIR/flatpak-info" ]; then
      DE="flatpak"
    fi
}

eos_yad_GetDesktopName() {      # return DE name in uppercase letters
    local de=$(eos_yad__detectDE && echo "$DE" | tr '[:lower:]' '[:upper:]')
    echo "$de"
}

# DIE()  { eos_yad_DIE  "$@" ; }    # deprecated
# WARN() { eos_yad_WARN "$@" ; }    # deprecated

#SetBrowser() {
#    local xx
#    for xx in xdg-open exo-open firefox chromium ; do  # use one of these browser commands
#        if [ -x /usr/bin/$xx ] ; then
#            _BROWSER=/usr/bin/$xx        # for showing external links
#            return
#        fi
#    done
#    DIE "$FUNCNAME: cannot find a browser"
#}


# check the config:
case "$EOS_ROOTER" in
    "su -c"          | "/usr/bin/su -c") ;;
    "pkexec bash -c" | "/usr/bin/pkexec bash -c") ;;
    "sudo bash -c"   | "/usr/bin/sudo bash -c") ;;
    "")
        export EOS_ROOTER="su -c"
        echo "Warning: no value for EOS_ROOTER in file /etc/eos-script-lib-yad.conf. Falling back to '$EOS_ROOTER'." >&2
        ;;
    *)
        eos_yad_DIE "Error: configuration '$EOS_ROOTER' for EOS_ROOTER in file /etc/eos-script-lib-yad.conf is not supported!"
        ;;
esac
