#!/bin/bash
#
# EndeavourOS greeter.
#
# Shows useful basic info about the EndeavourOS and its usage.
# Targeted for people new to EndeavourOS (but not new to Linux).
#
# TODO:
# - add icons to buttons once proper supported exists in yad

#################################################################################
EOS_SCRIPTS_YAD=/usr/share/endeavouros/scripts/eos-script-lib-yad
test -r  $EOS_SCRIPTS_YAD || {
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD" >&2
    exit 1
}
source $EOS_SCRIPTS_YAD
unset EOS_SCRIPTS_YAD

#export -f eos_yad
export -f eos_yad_terminal
export -f eos_yad_check_internet_connection
export -f eos_yad_GetArgVal
export -f eos_yad_RunCmdTermBash
export -f eos_yad_problem
export -f eos_yad_DIE
export -f eos_yad_WARN
export -f eos_yad__detectDE
export -f eos_yad_GetDesktopName
#################################################################################

export PROGNAME=eos-welcome
export INSTALLER_PROGRAM=/usr/bin/calamares


eos_yad() {
    GDK_BACKEND=x11 /usr/bin/yad "$@"
}
export -f eos_yad

IsInstalling() {
    test $show_installer -eq 1 && return 0
    test -x $INSTALLER_PROGRAM && test "$LOGNAME" = "liveuser"
}

yad_calamares() {
    local mode="$1"                             # offline, online, choose
    local prog=$INSTALLER_PROGRAM

    if [ ! -x $prog ] ; then
        eos_yad --text="$(basename $prog) is not available!" --title="Warning" --height=100 --width=200 --button=yad-quit:1
        return 1
    fi

    mode=offline                                # temporary setting for assets.make, remove this line later!

    if [ "$mode" = "choose" ] ; then
        local t1="This is a public development release.\n"
        local t2="<b>Offline</b> method gives you an Xfce desktop with EndeavourOS theming.\n"
        local t3="<b>Online</b> method lets you choose your desktop, with vanilla theming.\n"
        local t4="\nDISCLAIMER: no warranties whatsoever."

        local answer=$( eos_yad --form --title="Choose installation method" --image=dialog-question \
                                --text="$t1$t2$t3$t4" \
                                --field="Method":CB 'Offline!Online' )
        test -n "$answer" || return 1
        mode=$(echo "$answer" | cut -d '|' -f 1 | tr [:upper:] [:lower:])
    fi
    case "$mode" in
        offline) ;;
        online) ;;
        *)  echo "$PROGNAME: $FUNCNAME: unsupported mode '$mode'." >&2
            return 1
            ;;
    esac

    sudo cp -praf /usr/share/calamares/settings.conf_$mode         /usr/share/calamares/settings.conf
    sudo cp -praf /usr/share/calamares/modules/packages.conf_$mode /usr/share/calamares/modules/packages.conf
    sudo cp -praf /usr/share/calamares/modules/welcome.conf_$mode  /usr/share/calamares/modules/welcome.conf

    bash -c "pkexec $prog -d > /home/liveuser/endeavour-install.log"

    # test $netlog -eq 1 && cat /home/liveuser/endeavour-install.log | curl -F 'f:1=<-' ix.io
}
export -f yad_calamares

yad_UpdateMe() {
    local prompt="echo 'Updating EndeavourOS Greeter'"
    local cmd="sudo pacman -Syy welcome --needed"
    local msg="printf '\nClose the EndeavourOS Greeter and restart it by running a terminal command: $PROGNAME\n\n'"
    eos_yad_RunCmdTermBash "$prompt ; $cmd ; $msg"
}
export -f yad_UpdateMe

yad_UpdateEOStoLatest() {    # Show what to update in order to set any EOS install at the "latest level".
    local removes=(kalu)
    local installs=(eos-update-notifier reflector-simple)
    local rem=() ins=()
    local xx
    for xx in "${removes[@]}" ; do
        pacman -Q "$xx" >& /dev/null && rem+=("$xx")
    done
    for xx in "${installs[@]}" ; do
        pacman -Q "$xx" >& /dev/null || ins+=("$xx")
    done
    
    local t1="To have your EndeavourOS install on par with the latest and greatest, the following actions are needed:\n"
    local t2="- uninstall packages: ${rem[*]}\n"
    local t3="- install packages: ${ins[*]}\n"
    local t="$t1"
    test -n "$rem" && t+="$t2"
    test -n "$ins" && t+="$t3"
    test "$t" = "$t1" && t+="Your system is already at the latest level!"
    eos_yad --text="$t" --title="Upgrading EndeavourOS level" --image=info --button=yad-ok:0
}
export -f yad_UpdateEOStoLatest

yad_PkgConflicts() {
    local cpu
    local removes=()
    local title="Package conflicts detection"

    # having both amd and intel microcode packages are not needed and may cause issues with grub
    pacman -Q amd-ucode >& /dev/null && {
        pacman -Q intel-ucode >& /dev/null && {
            cpu=$(grep -w "^vendor_id" /proc/cpuinfo | head -n 1 | awk '{print $3}')
            case "$cpu" in
                GenuineIntel) removes+=(amd-ucode) ;;
                *)            removes+=(intel-ucode) ;;
            esac
        }
    }
    if [ -n "$removes" ] ; then
        local prompt="echo Package conflicts detected. Removing packages: ${removes[*]}"
        local cmd="su -c 'pacman -Rsn ${removes[*]} && grub-mkconfig -o /boot/grub/grub.cfg'"
        eos_yad_RunCmdTermBash "$prompt ; $cmd"
    else
        local t="No system package problems were detected in your machine."
        eos_yad --text="$t" --title="$title" --image=info --button=yad-ok:0
    fi
}
export -f yad_PkgConflicts

yad_SystemUpdate() {
    local tmpfile=$(mktemp)
    cat <<EOF > $tmpfile
#!/bin/bash
_xx_main() {
  local updates="\$(checkupdates)"
  test -n "\$updates" && {
      echo "\$updates"
      yay -Syu --noconfirm
  } || {
      echo "No updates."
  }
}
_xx_main
EOF
    chmod +x $tmpfile
    eos_yad_RunCmdTermBash "echo Checking for software updates... ; $tmpfile ; rm -f $tmpfile"
}
export -f yad_SystemUpdate

yad_InitializePacmanMirroring() {
    local tmpfile=$(mktemp)
    cat <<EOF > $tmpfile
#!/bin/bash
haveged -w 1024
pacman-key --init
pacman-key --populate
pacman-key --refresh-keys
pkill haveged
EOF
    chmod +x $tmpfile
    eos_yad_RunCmdTermBash "echo 'Initializing mirroring for pacman...' ; pkexec $tmpfile ; rm -f $tmpfile"
}
export -f yad_InitializePacmanMirroring

yad_Install() {
    # Install one or more given packages. Does not reinstall any packages.

    local yadcmd="eos_yad --text-info --title=Installer --wrap --tail --width=600 --height=500 --button=yad-quit:0"

    local pkg pkgs=()
    for pkg in "$@" ; do
        pacman -Q "$1" >& /dev/null || pkgs+=("$pkg")
    done
    test -z "$pkgs" && {
        echo "$*: already installed" | $yadcmd
        return
    }
    while true ; do
        echo "Installing ${pkgs[*]} ..."
        pkexec pacman -S --noconfirm "${pkgs[@]}"
        echo "Finished."
        break
    done |& $yadcmd
}
export -f yad_Install

yad_GetCurrentDM() {
    local current=$(ls -l /etc/systemd/system/display-manager.service | awk '{print $NF}')
    current="$(basename $current .service)"
    echo "$current"
}
export -f yad_GetCurrentDM

yad_ChangeDisplayManager() {
    local cmd count
    local dmlist="" dm
    local dms=(gdm lightdm lxdm sddm)
    local current=$(yad_GetCurrentDM)

    count="${#dms[@]}"

    cmd=(eos_yad --list --radiolist --title="Select Display Manager" --width=300 --height=200)
    cmd+=(--column="Selected":rd --column="DM name")

    for ((ix=0; ix<count; ix++)) ; do
        dm="${dms[$ix]}"
        case "$dm" in
            $current) cmd+=(true  "$dm") ;;
            *)        cmd+=(false "$dm") ;;
        esac
    done

    # selected new dm
    dm="$("${cmd[@]}" | cut -d '|' -f 2)"

    case "$dm" in
        "$current" | "") return ;;
    esac

    cmd=""
    pacman -Q "$dm" >& /dev/null || {
        case "$dm" in
            lightdm) cmd+="pacman -S ${dm}{,-gtk-greeter{,-settings}} --noconfirm >& /dev/null && ";;
            *)       cmd+="pacman -S $dm --noconfirm >& /dev/null && " ;;
        esac
    }
    cmd+="systemctl disable $current && systemctl enable $dm"
    pkexec bash -c "$cmd"

    if [ "$(yad_GetCurrentDM)" = "$dm" ] ; then
        echo "Reboot is required for the changes to take effect." | \
            eos_yad --text-info --title="DM changed to $dm" --wrap --width=300 --height=200 --button=yad-quit:0
    else
        echo "Changing DM failed." | \
            eos_yad --text-info --title="Warning" --width=300 --height=200 --button=yad-quit:0
    fi
}
export -f yad_ChangeDisplayManager

yad_eos_default_theming() {                        # TODO !!!
    local theming_support_skip=1
    if [ $theming_support_skip -eq 1 ] ; then
        eos_yad --text="Sorry, theming not (yet) supported!" --title="Warning" \
                --height=100 --width=300 --button=yad-quit:1
        return 1
    fi
    local DE="$(eos_yad_GetDesktopName)"
    case "$DE" in
        XFCE | CINNAMON) ;;
        "") eos_yad_WARN "unable to detect Desktop Environment!"
            return 1
            ;;
        *)  eos_yad --text="Sorry, theming not (yet) supported for '$DE'!" --title="Warning" \
                    --height=100 --width=300 --button=yad-quit:1
            return 1
            ;;
    esac
    local themer="$(mktemp -u "$HOME/.eos-theming-$DE-XXXXXXX.sh")"

    wget -q --timeout=10 -O "$themer" https://github.com/endeavouros-team/DE-theming/raw/master/eos-theming.sh || {
        eos_yad_WARN "welcome: unable to fetch theming installer!"
        return 1
    }

    eos_yad_RunCmdTermBash "bash \"$themer\" $DE ; rm -f \"$themer\""

}
export -f yad_eos_default_theming

INSTALL() {
  local handle="$1"
  local tabnum="$2"
  local _exclamation='&#33;'   # '!'

  eos_yad --plug="$handle" --tabnum="$tabnum" \
          --form \
          --columns=2 \
          --image=gtk-save \
          --text="<b>Installing EndeavourOS to disk</b>" --text-align=left \
          --field="START THE INSTALLER$_exclamation!!Start the EndeavourOS installer":fbtn    'bash -c "yad_calamares choose"' \
          --field="Update this app$_exclamation!!Update this app and restart it":fbtn  'bash -c yad_UpdateMe' \
          --field="Initialize pacman keys!!Initialize pacman keys":fbtn          'bash -c yad_InitializePacmanMirroring' \
          --field="Partition manager!!Gparted allows examining and managing disk partitions":fbtn    'gparted' \
          --field="Latest release info!!Info about the latest release":fbtn      "$_BROWSER https://endeavouros.com/latest-release" \
          --field="Installation tips!!Installation tips":fbtn                    "$_BROWSER https://endeavouros.com/docs/installation" \
          --field="Troubleshoot!!System Rescue":fbtn                             "$_BROWSER https://endeavouros.com/docs/system-rescue" \
      &> /dev/null &

  #          --field="Update Me$_exclamation!!Update this app and restart it":fbtn  'bash -c yad_UpdateMe'
  # use 'gparted' as the icon for gparted!
}

GeneralInfo() {
  local handle="$1"
  local tabnum="$2"
  eos_yad --plug="$handle" --tabnum="$tabnum" \
          --form \
          --columns=3 \
          --image=dialog-question \
          --text="<b>Find your way at the EndeavourOS website!</b>" --text-align=left \
          --field="Web site!!https://endeavouros.com":fbtn                        "$_BROWSER https://endeavouros.com" \
          --field="Wiki!!Featured articles":fbtn                                  "$_BROWSER https://endeavouros.com/wiki" \
          --field="News!!News and articles":fbtn                                  "$_BROWSER https://endeavouros.com/posts" \
          --field="Forum!!Ask, comment, and chat in our friendly forum!":fbtn     "$_BROWSER https://forum.endeavouros.com" \
          --field="Donate!!Help us keep EndeavourOS running":fbtn                 "$_BROWSER https://endeavouros.com/donate" \
          --field="About me!!More info about this app":fbtn                       "$_BROWSER https://endeavouros.com/docs/applications/welcome-greeter" \
      &> /dev/null &
}

AfterInstall() {
  local handle="$1"
  local tabnum="$2"

  local _exclamation='&#33;'   # '!'
  local _and='&#38;'           # '&'

  eos_yad --plug="$handle" --tabnum="$tabnum" \
          --form \
          --columns=2 \
          --image=dialog-information \
          --text="<b>After install tasks</b>" --text-align=left \
          --field=" Update Mirrors!network-server!Update list of mirrors before system update":fbtn   'reflector-simple' \
          --field=" Update System!system-software-update!Update System Software":fbtn                 'bash -c yad_SystemUpdate' \
          --field=" Detect package issues!info!Detect any potential issues on system packages":fbtn                'bash -c yad_PkgConflicts' \
          --field=' EndeavourOS to latest?!up!Show what to do to get your system to the latest EndeavourOS "level"':fbtn  'bash -c yad_UpdateEOStoLatest' \
          --field=" Change Display Manager!gdm!Use a different display manager":fbtn                  'bash -c yad_ChangeDisplayManager' \
          --field="Package management!!How to manage packages with 'pacman'":fbtn      "$_BROWSER https://endeavouros.com/docs/pacman" \
          --field="AUR $_and yay$_exclamation!!Arch User Repository info":fbtn         "$_BROWSER https://endeavouros.com/docs/aur/yay" \
          --field="Hardware and Network!!Get your hardware working":fbtn               "$_BROWSER https://endeavouros.com/docs/hardware-and-network" \
          --field="Bluetooth!!Bluetooth advice":fbtn                                   "$_BROWSER https://wiki.archlinux.org/index.php/Bluetooth" \
          --field="NVIDIA users$_exclamation!!Use NVIDIA installer":fbtn               "$_BROWSER https://endeavouros.com/docs/hardware-and-network/nvidia-installer" \
          --field="Forum tips!!Help us help you!":fbtn                                 "$_BROWSER https://endeavouros.com/docs/forum/how-to-include-systemlogs-in-your-post" \
      &> /dev/null &
#          --field=" Install Desktop Environment!desktop!Install another Desktop Environment":fbtn     'eos-install-de'
#          --field=" Change to default theming!preferences-desktop-tweaks!Change to default theming of the Desktop":fbtn     'bash -c yad_eos_default_theming' \
}

AddMoreApps() {
  local handle="$1"
  local tabnum="$2"

  local gufw=""            #=gufw
  local libreoffice=""     #=libreoffice
  local chromium=""        #=chromium-browser
  local bluetooth=""       #=bluetooth

  eos_yad --plug="$handle" --tabnum="$tabnum" \
          --form \
          --columns=3 \
          --image=system-software-install \
          --text="<b>Install popular apps</b>" --text-align=left \
          --field=" LibreOffice!$libreoffice!Office tools (libreoffice-fresh)":fbtn  'bash -c "yad_Install libreoffice-fresh"' \
          --field=" Chromium Web Browser!$chromium!Web Browser":fbtn                 'bash -c "yad_Install chromium"' \
          --field=" Firewall!$gufw!Gufw firewall":fbtn                               'bash -c "yad_Install gufw"' \
          --field=" Bluetooth Manager for Xfce!$bluetooth!Blueberry":fbtn            'bash -c "yad_Install blueberry bluez-utils"' \
      &> /dev/null &
}

About() {
  local handle="$1"
  local tabnum="$2"

  Usage | eos_yad --plug="$handle" --tabnum="$tabnum" \
                  --text-info \
                  --text="<b>More info about the Welcome app</b>" \
                  --text-align=left \
                  --image=help-about \
      &> /dev/null &
}


# Fields explanation:
# --field="ButtonName!IconName!Tooltip":fbtn "Command"

### These variables are required:

_NOTEBOOK_TITLE="EndeavourOS Greeter"        # main window title

CreateNotebookCommands() {
    IsInstalling && {
        _NOTEBOOK_TABS=(                             # names of functions above
            INSTALL
            GeneralInfo
        )
    } || {
        _NOTEBOOK_TABS=(                             # names of functions above
            GeneralInfo
            AfterInstall
            AddMoreApps
            #About
        )
    }
}

####################### DO NOT CHANGE ANYTHING AFTER THIS LINE! ######################################################

Usage() {
    cat <<EOF
Usage: $PROGNAME [options]

Options:
--startdelay=X    Wait before actually starting the app.
                  X value syntax is the same as in 'sleep'.
--enable | -f     Enable this Welcome app.
--disable         Disable this Welcome app.

To have Welcome app started when you log in, make sure
- welcome app is selected in the Autostart feature of the DE
    OR
- "Hidden=false" is set in file /etc/xdg/autostart/welcome.desktop

On DEs that do not work well with Autostart:
You may also disable the Welcome app from the app itself
- with the --disable option
- with a button in the app (some DEs only)

To re-enable the app, use the terminal command
    $PROGNAME --enable
EOF
}
export -f Usage

DIE() {
    local title="Error"
    while true ; do
        echo "Error: $1."
        Usage
        break
    done | eos_yad_problem "$title" "$@"
    exit 1
}

WelcomeHelp() {
    Usage | eos_yad --text-info --title="Welcome Help" --width=600 --height=500 \
                    --text="<b>More info about the Welcome app</b>" \
                    --text-align=left \
                    --image=help-about --button=yad-ok:0
}
export -f WelcomeHelp

SetBrowser() {
    local xx
    for xx in xdg-open exo-open firefox chromium ; do  # use one of these browser commands
        if [ -x /usr/bin/$xx ] ; then
            _BROWSER=/usr/bin/$xx        # for showing external links
            return
        fi
    done
    DIE "$FUNCNAME: cannot find a browser"
}

PrepareTabs() {
    local handle="$1"
    local xx ix
    ix=1
    for xx in "${_NOTEBOOK_TABS[@]}" ; do
        $xx "$handle" "$((ix++))"
    done
}

SeparateWordsWithSpaces() { # add a space before a capital letter inside a word
    local tabname="$1"

    if [ "$(echo "$tabname" | tr -d '[a-z]')" = "$tabname" ] ; then
        echo "$tabname"           # all capital letters ==> don't change
    else
        echo "$tabname" | sed -e 's|\([A-Z]\)| \1|g' -e 's|^ ||'  # add space before capital letters
    fi
}

KillExtraYad() {
    # There may be an extra "yad" process in vain because
    # the "save session" feature of Xfce has not stored the proper command for this app.
    #
    # The extra yad process will be eliminated by
    #   - removing the extra "yad" command from the stored session
    #   - killing the extra "yad" process if it exists

    # Remove the extra "yad" command from the saved session.
    local savefile="$(ls -1 "$HOME"/.cache/sessions/xfce4-session-* 2>/dev/null | grep -vP "\.bak$" | tail -n 1)"
    if [ -n "$savefile" ] ; then
        local count=$(grep ^LegacyCount= "$savefile" | cut -d '=' -f 2)
        local endcount=$count
        if [ "$(grep "^Legacy0_Command=yad$" "$savefile")" != "" ] || [ "$(grep "^Legacy0_Command=eos_yad$" "$savefile")" != "" ] ; then
            ((endcount--))
            sed -i "$savefile" \
                -e 's|^Legacy0_Screen=.*$||' \
                -e 's|^Legacy0_Command=.*$||' \
                -e 's|^Legacy0_ClientMachine=.*$||'
        fi
        if [ $endcount -ne $count ] ; then
            sed -i "$savefile" -e 's|^LegacyCount=.*$|LegacyCount='$endcount'|'
        fi
    fi

    # Now check if an extra "yad" process is already running. If so, simply kill it.

    sleep 0.1    # must wait a bit!

    local yadlines yadline
    local pid ppid lastword
    local processes="$(ps -ef | grep -w yad | grep -v "grep -w yad" | grep -v "^root")"  # search 'yad' without 'root'
    local problem_ppid=1

    # search for the right "extra" yad process
    if [ "$(echo "$processes" | awk '{print $NF}')" = "yad" ] ; then
        readarray -t yadlines <<< "$(echo "$processes")"
        for yadline in "${yadlines[@]}" ; do
            lastword="$(echo "$yadline" | awk '{print $NF}')"
            ppid="$(echo "$yadline" | awk '{print $3}')"
            if [ "$lastword" = "yad" ] && [ "$ppid" = "$problem_ppid" ] ; then
                # found the "extra" yad process
                pid="$(echo "$yadline" | awk '{print $2}')"
                kill $pid
                echo "$yadline" > /tmp/save-session-zombie-yad-killed.log
            fi
        done
    fi
}

GreeterSettings() {
    local value="$1"   # enable, disable, check
    local GREETER_CONFIG="$HOME/.config/EOS-greeter.conf"

    case "$value" in
        enable)
            echo "Greeter=$value"  > "$GREETER_CONFIG"
            ;;
        disable)
            echo "Greeter=$value" > "$GREETER_CONFIG"

            echo "To run the greeter again, start a terminal and run '$PROGNAME --enable'." | \
                eos_yad --text-info --image=dialog-information --text="Re-enabling the greeter:" \
                        --title="How to re-enable greeter" \
                        --geometry=500x200 --wrap \
                        --fontname="Monospace Regular 12" \
                        --button=" I remember!face-angel!I promise":0 >& /dev/null
            ;;
        check)
            test -r "$GREETER_CONFIG" || { echo enable ; return ; }              # enabled if config does not exist
            grep "^Greeter=" "$GREETER_CONFIG" 2>/dev/null | cut -d '=' -f 2
            ;;
    esac
}

StartHere() {
    KillExtraYad

    local show_installer=0    # explicitly show the installer, for testing only
    local start_delay=0
    #local netlog=0

    local arg

    for arg in "$@" ; do
        case "$arg" in
            --enable|-f) GreeterSettings enable ;;
            --disable)   GreeterSettings disable ; return ;;
            --startdelay=*) start_delay="${arg:13}" ;;
            --installer) show_installer=1 ;;
            #--netlog) netlog=1 ;;
            -*) DIE "unsupported option '$arg'" ;;
            *)  DIE "unsupported parameter '$arg'" ;;
        esac
    done

    CreateNotebookCommands

    test "$(GreeterSettings check)" != "enable" && {
        echo "Welcome app is disabled. To start it anyway, use option --enable."
        return
    }

    test IsInstalling || {
        eos_yad_check_internet_connection verbose 10 || return 1
    }

    if [ "$start_delay" != "0" ] ; then
        sleep "$start_delay"
    fi

    SetBrowser

    local handle="$(shuf -i 700000-999999 -n 1)"
    local tab tabname
    local notebook   # contains the main yad command

    PrepareTabs "$handle" || DIE "PrepareTabs failed"

    # Create the yad command gradually into an array 'notebook':

    notebook=(eos_yad --notebook --key="$handle" --center --title="$_NOTEBOOK_TITLE")
    for tab in "${_NOTEBOOK_TABS[@]}" ; do
        tabname="$(SeparateWordsWithSpaces "$tab")"
        notebook+=(--tab="$tabname")
    done

    IsInstalling || notebook+=(--active-tab=2)

    notebook+=(--button=" Help!help!":"bash -c WelcomeHelp")

    case "$(eos_yad_GetDesktopName)" in
        KDE)
            notebook+=(--button=" See you later!face-cool!Keep greeter enabled":0)
            notebook+=(--button=" Don't show me anymore!face-crying!Disable the greeter":5)
            "${notebook[@]}"
            local result=$?
            case "$result" in
                5) GreeterSettings disable ;;
                0|252) GreeterSettings enable ;;
            esac
            ;;
        *)
            notebook+=(--button=" See you later!face-cool!":0)
            "${notebook[@]}"
            ;;
    esac
}

StartHere "$@"

exit 0
