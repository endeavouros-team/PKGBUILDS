#!/bin/bash
#
# Welcome: the EndeavourOS greeter.
#
# Shows useful basic info about the EndeavourOS and its usage.
# Targeted for people new to EndeavourOS (but not new to Linux).
#
# TODO:
# - add icons to buttons once proper supported exists in yad

export PROGNAME=eos-welcome
export PRETTY_PROGNAME="Welcome"

EOS_SCRIPTS_DIR=/usr/share/endeavouros/scripts
translations_dir=$EOS_SCRIPTS_DIR                 # used also by the translation.bash !!

source $translations_dir/translations.bash


#################################################################################
EOS_SCRIPTS_YAD=$EOS_SCRIPTS_DIR/eos-script-lib-yad
test -r  $EOS_SCRIPTS_YAD || {
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD" >&2
    exit 1
}
source $EOS_SCRIPTS_YAD

unset EOS_SCRIPTS_YAD

export -f eos_yad
export -f eos_yad_terminal
export -f eos_yad_check_internet_connection
export -f eos_yad_GetArgVal
export -f eos_yad_RunCmdTermBash
export -f eos_yad_problem
export -f eos_yad_DIE
export -f eos_yad_WARN
export -f eos_yad__detectDE
export -f eos_yad_GetDesktopName
export -f eos_GetArch
export -f eos_select_browser
export -f eos_yad_nothing_todo
#################################################################################

export PROG_PACKAGENAME="welcome"
export INSTALLER_PROGRAM=/usr/bin/calamares
export EOS_LIVEUSER=liveuser
export EOS_KEEP_PKGS
export PROG_VERSION="$(/usr/bin/pacman -Q $PROG_PACKAGENAME | awk '{print $2}')"
export INSTALL_LOG_FILE=/home/$EOS_LIVEUSER/endeavour-install.log


AfterTranslations() {
    # Here we have definitions that require special treatment because of
    # yad running in other processes...

    export WH_BUTT_TITLE="$(ltr help_butt_title)"
    export WH_BUTT_TEXT="$(ltr help_butt_text)"

    export CAL_NOAVAIL="$(ltr cal_noavail)"
    export CAL_WARN="$(ltr cal_warn)"
    export CAL_INFO1="$(ltr cal_info1)"
    export CAL_INFO2="$(ltr cal_info2)"
    export CAL_INFO3="$(ltr cal_info3)"
    export CAL_INFO4="$(ltr cal_info4)"
    export CAL_CHOOSE="$(ltr cal_choose)"
    export CAL_METHOD="$(ltr cal_method)"
    export CAL_NOSUPPORT="$(ltr cal_nosupport)"
    export CAL_NOFILE="$(ltr cal_nofile)"
    export CAL_ISTARTED="$(ltr cal_istarted)"
    export CAL_ISTOPPED="$(ltr cal_istopped)"
    export ISSUES_TITLE="$(ltr issues_title)"
    export ISSUES_FRUB="$(ltr issues_grub)"
    export ISSUES_RUN="$(ltr issues_run)"
    export ISSUES_NO="$(ltr issues_no)"
    export SYSUP_NO="$(ltr sysup_no)"
    export SYSUP_CHECK="$(ltr sysup_check)"
    export INSTALL_INSTALLER="$(ltr install_installer)"
    export INSTALL_ALREADY="$(ltr install_already)"
    export INSTALL_ING="$(ltr install_ing)"
    export INSTALL_DONE="$(ltr install_done)"
    export DM_TITLE="$(ltr dm_title)"
    export DM_COL_NAME1="$(ltr dm_col_name1)"
    export DM_COL_NAME2="$(ltr dm_col_name2)"
    export DM_REBOOT_REQUIRED="$(ltr dm_reboot_required)"
    export DM_CHANGED="$(ltr dm_changed)"
    export DM_FAILED="$(ltr dm_failed)"
    export DM_WARNING_TITLE="$(ltr dm_warning_title)"
    export AFTER_INSTALL_US="$(ltr after_install_us)"
    export AFTER_INSTALL_US_FROM="$(ltr after_install_us_from)"
    export AFTER_INSTALL_US_EL="$(ltr after_install_us_el)"
    export AFTER_INSTALL_US_DONE="$(ltr after_install_us_done)"
    export AFTER_INSTALL_US_FAIL="$(ltr after_install_us_fail)"
    export UPDT_NOTHING_TODO="$(ltr updt_nothing_todo)"
    export UPDT_UPDATE_CHECK="$(ltr updt_update_check):"
}

IsInstalled() { /usr/bin/pacman -Q "$1" >& /dev/null ; }
export -f IsInstalled

IsInstalling() {
    test "$show_installer" = "yes" && return 0
    test -x $INSTALLER_PROGRAM && test "$LOGNAME" = "$EOS_LIVEUSER"
}
export -f IsInstalling

yad_tailer() {
    local file="$1"

    tail -f "$file" | \
        eos_yad --text-info --title="$(basename "$file")" \
                --button=" $(ltr tail_butt)!dialog-close!$(ltr tail_buttip)":0 \
                --width=$width --height=$height --tail --wrap --posx=$posx --posy=$posy \
                >& /dev/null &
}
export -f yad_tailer

eos_yad_WARN_debug() {
    test "$debugging" = "yes" && eos_yad_WARN "$1"
}
export -f eos_yad_WARN_debug


Welog() {
    [ -d /home/$EOS_LIVEUSER ] && echo "$progname: " "$@" >> $INSTALL_LOG_FILE
}
export -f Welog

yad_Install() {
    # Install one or more given packages. Does not reinstall any packages.

    local yadcmd=(
        eos_yad --text-info --width=600 --height=500 --title="$INSTALL_INSTALLER" --wrap --tail --button=yad-quit:0 --fontname="Mono 10"
    )
    local pkg pkgs=()

    for pkg in "$@" ; do
        case "$pkg" in
            */*) pkgs+=("$pkg") ;;                                    # $repo/$pkg: force install
            *)   IsInstalled "$pkg" >& /dev/null || pkgs+=("$pkg") ;;
        esac
    done
    test -z "$pkgs" && {
        echo "$*: $INSTALL_ALREADY" | "${yadcmd[@]}"
        return
    }
    while true ; do
        echo "$INSTALL_ING ${pkgs[*]} ..."
        pkexec pacman -S --noconfirm "${pkgs[@]}"
        echo "$INSTALL_DONE"
        break
    done |& "${yadcmd[@]}"
}
export -f yad_Install

yad_Remove() {
    # Remove one or more given packages.

    # TODO: translate these!
    local REMOVER="Remover"
    local REMOVING="Removing"
    local NOT_INSTALLED="not installed"

    local yadcmd=(
        eos_yad --text-info --title="$REMOVER" --wrap --tail --width=600 --height=500 --button=yad-quit:0 --fontname="Mono 10"
    )

    local pkg pkgs=()
    for pkg in "$@" ; do
        IsInstalled "$pkg" >& /dev/null && pkgs+=("$pkg")
    done
    test -z "$pkgs" && {
        echo "$*: $NOT_INSTALLED" | "${yadcmd[@]}"
        return
    }
    while true ; do
        echo "$REMOVING ${pkgs[*]} ..."
        pkexec pacman -Rdd --noconfirm "${pkgs[@]}"
        echo "$INSTALL_DONE"
        break
    done |& "${yadcmd[@]}"
}
export -f yad_Remove

yad_GetCurrentDM() {
    local current=$(ls -l /etc/systemd/system/display-manager.service | awk '{print $NF}')
    current="$(basename $current .service)"
    echo "$current"
}
export -f yad_GetCurrentDM

yad_ChangeDisplayManager() {
    local cmd count
    local dmlist="" dm
    local dms=(gdm lightdm lxdm sddm)
    local current=$(yad_GetCurrentDM)

    count="${#dms[@]}"

    cmd=(eos_yad --list --radiolist --title="$DM_TITLE" --width=300 --height=200)
    cmd+=(--column="$DM_COL_NAME1":rd --column="$DM_COL_NAME2")

    for ((ix=0; ix<count; ix++)) ; do
        dm="${dms[$ix]}"
        case "$dm" in
            $current) cmd+=(true  "$dm") ;;
            *)        cmd+=(false "$dm") ;;
        esac
    done

    # selected new dm
    dm="$("${cmd[@]}" | cut -d '|' -f 2)"

    case "$dm" in
        "$current" | "") return ;;
    esac

    cmd=""
    IsInstalled "$dm" >& /dev/null || {
        case "$dm" in
            lightdm) cmd+="pacman -S ${dm}{,-gtk-greeter{,-settings}} --noconfirm >& /dev/null && ";;
            *)       cmd+="pacman -S $dm --noconfirm >& /dev/null && " ;;
        esac
    }
    cmd+="systemctl disable $current && systemctl enable $dm"
    pkexec bash -c "$cmd"

    if [ "$(yad_GetCurrentDM)" = "$dm" ] ; then
        echo "$DM_REBOOT_REQUIRED" | \
            eos_yad --text-info --title="$DM_CHANGED $dm" --wrap --width=300 --height=200 --button=yad-quit:0
    else
        echo "$DM_FAILED" | \
            eos_yad --text-info --title="$DM_WARNING_TITLE" --width=300 --height=200 --button=yad-quit:0
    fi
}
export -f yad_ChangeDisplayManager

yad_vanilla_xfce4_theme() {
    local log="$HOME/.config/EOS-xfce-theme.log"
    local DE="$(eos_yad_GetDesktopName)"
    local new_theme_name="vanilla"
    case "$DE" in
        XFCE)
            local conf="$HOME/.config/xfce4"
            local datetime="$(date '+%Y%m%d-%H:%M:%S')"
            local msg="If you agree to change Xfce theme to $new_theme_name, your previous theme\nwill be saved into folder <b>$conf.$datetime</b>\n\n"
            msg+="To restore the previous theme:\n     - remove folder <b>$conf</b>\n     - rename <b>$conf.$datetime</b> into <b>$conf</b>\n\n"
            msg+="(Note: this info is stored into file $log).\n\n"
            msg+="Reboot is required for the theme change to take effect.\n\nAccept theme change and reboot now?"
            printf "%s\n" "$msg" | sed -e 's|\\n|\n|g' -e 's|<[/]*b>||g' > "$log"
            eos_yad --form --title="Change Xfce theme to $new_theme_name" --text="$msg" --image=preferences-desktop-theme \
                    --button='yad-cancel!!Do nothing':1 --button='yad-ok!!Accept theme change and reboot now':0
            case "$?" in
                0) mv $conf $conf.$datetime ; reboot ;;
            esac
            ;;
        *)  echo "Sorry $DE user, only Xfce is supported." > "$log"
            ;;
    esac
}
export -f yad_vanilla_xfce4_theme

yad_endeavouros_xfce4_theme() {
    local log2='$HOME/.config/EOS-xfce-theme.log'
    local log="$(eval echo $log2)"
    local DE="$(eos_yad_GetDesktopName)"
    local new_theme_name="EndeavourOS default"
    case "$DE" in
        XFCE)
            local conf="$HOME/.config/xfce4"
            local conf2='$HOME/.config/xfce4'
            local datetime="$(date '+%Y%m%d-%H:%M:%S')"
            local msg="If you agree to change Xfce theme to $new_theme_name, your previous theme\nwill be saved into folder <b>$conf2.$datetime</b>\n\n"
            msg+="To restore the previous theme:\n     - remove folder <b>$conf2</b>\n     - rename <b>$conf2.$datetime</b> into <b>$conf2</b>\n\n"
            msg+="(Note: this info is stored into file $log2).\n\n"
            msg+="Reboot is required for the theme change to take effect.\n\nAccept theme change and reboot now?"
            printf "%s\n" "$msg" | sed -e 's|\\n|\n|g' -e 's|<[/]*b>||g' > "$log"
            eos_yad --form --title="Change Xfce theme to $new_theme_name" --text="$msg" --image=preferences-desktop-theme \
                    --button='yad-cancel!!Do nothing':1 --button='yad-ok!!Accept theme change and reboot now':0
            case "$?" in
                0)
                    # Backup old xfce4 configuration.
                    mv $conf $conf.$datetime

                    # Fetch the EndeavourOS default Xfce theme from github.
                    local tmpdir=$(mktemp -d)
                    pushd $tmpdir >/dev/null

                    if [ 1 -eq 1 ] ; then
                        git clone $(Github2Gitlab https://github.com/endeavouros-team/endeavouros-xfce4-theming.git) 2>/dev/null || {
                            popd >/dev/null
                            rm -rf $tmpdir
                            return 1
                        }
                        local pkgs2=$(cat endeavouros-xfce4-theming/xfce4-packages-list)
                        local pkg pkg2 group_members pkgs=""
                        for pkg in $pkgs2 ; do
                            pacman -Qq $pkg >& /dev/null && continue
                            if pacman -Si $pkg >& /dev/null ; then
                                pkgs+=" $pkg"
                            else
                                group_members="$(pacman -Sqg $pkg)"      # find group members
                                for pkg2 in $group_members ; do
                                    pacman -Qq $pkg2 >& /dev/null && continue
                                    pkgs+=" $pkg2"
                                done
                            fi
                        done
                        if [ -n "$pkgs" ] ; then
                            pkgs="${pkgs:1}"
                            RunInTerminal "echo 'pacman -S $pkgs' ; $EOS_ROOTER 'pacman -S $pkgs'"
                        fi
                        dbus-launch dconf load / < endeavouros-xfce4-theming/xed.dconf
                        mv endeavouros-xfce4-theming/.config/xfce4      "$(dirname "$conf")"
                        mv endeavouros-xfce4-theming/.config/gtk-3.0    "$(dirname "$conf")"
                    else
                        # the old way
                        git clone $(Github2Gitlab https://github.com/endeavouros-team/EndeavourOS-iso-next.git) 2>/dev/null
                        mv EndeavourOS-iso-next/airootfs/etc/skel/.config/xfce4   "$(dirname "$conf")"
                        mv EndeavourOS-iso-next/airootfs/etc/skel/.config/gtk-3.0 "$(dirname "$conf")"
                    fi

                    popd >/dev/null
                    rm -rf $tmpdir
                    /usr/share/endeavouros/scripts/wallpaper-once -rr   # allows default wallpaper question after reboot
                    reboot
                    ;;
            esac
            ;;
        *)  echo "Sorry $DE user, only Xfce is supported." > "$log"
            ;;
    esac
}
export -f yad_endeavouros_xfce4_theme

WelcomeDevelConf() {
    # Supported config file variables, defaults, and supported values:
    #    local _show_change_reso=no      # yes or no
    #
    local varname="$1"
    local fallback="$2"

    test -n "$fallback" || {
        echo "Error: ${FUNCNAME[1]} calling ${FUNCNAME[0]}: must give two parameters!" >&2
        return 1
    }

    # echo "$fallback" ; return

    local devconf="$HOME/.config/welcome-devel.conf"
    local answer="$fallback"

    if [ -r "$devconf" ] ; then
        source "$devconf"
        answer="${!varname}"
        test -n "$answer" || answer="$fallback"
    fi
    echo "$answer"

}
export -f WelcomeDevelConf

ShowChangeResoButton() {
    # Allow showing a button for changing the display resolution?

    [ -x /usr/bin/xrandr ] || return

    local show_reso_butt="$(WelcomeDevelConf _show_change_reso no)"

    if [ "$show_reso_butt" = "no" ] ; then
        case "$(device-info --vm)" in
            virtualbox | qemu | kvm | vmware)
                show_reso_butt=yes ;;                  # in a VM always show the button
        esac
    fi
    if [ -x $INSTALLER_PROGRAM ] || [ "$LOGNAME" = "$EOS_LIVEUSER" ] || [ "$show_installer" = "yes" ] ; then
        show_reso_butt=yes                  # show the button if installing
    fi

    if [ "$show_reso_butt" = "yes" ] ; then
        local icon=preferences-desktop-display
        tabcontents+=(--field=" $(ltr ins_reso)!$icon!$(ltr ins_resotip)":fbtn   ChangeDisplayResolution)
    fi
}
export -f ShowChangeResoButton

INSTALL() {
  local handle="$1"
  local tabnum="$2"
  local _exclamation='&#33;'   # '!'
  local image=$system_software_install
  local gparted="$(IconGrasp gparted)"
  local reflector_simple="$(IconGrasp software-update-available)"
  local user_info=info
  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form  --columns=2
      --image=$image
      --text="<b>$(ltr ins_text)</b>" --text-align=left

      --field=" $(ltr ins_start)!$system_software_install!$(ltr ins_starttip)":fbtn                 "eos-install-mode-run-calamares '$lang' '' FALSE TRUE"   # pacman log by default
  )
  if [ "$EOS_COMMUNITY_EDITIONS" = "experimental" ] ; then
      tabcontents+=(
          --field=" $(ltr install_community)!$system_software_install!$(ltr install_community_tip)":fbtn "eos-install-mode-run-calamares '$lang' community TRUE TRUE"  # show all logs
      )
  fi
  tabcontents+=(
      --field=" $(ltr after_install_um)!$reflector_simple!$(ltr after_install_umtip)":fbtn          reflector-simple
  )

  ShowChangeResoButton

  local icon=face-worried #dialog-question
  tabcontents+=(
      --field=" $(ltr ins_pm)!$gparted!$(ltr ins_pmtip)":fbtn                  'gparted'
      --field=" $(ltr ins_rel)!$user_info!$(ltr ins_reltip)":fbtn              "$_WELCOME_BROWSER https://endeavouros.com/latest-release"
      --field=" $(ltr ins_tips)!$user_info!$(ltr ins_tipstip)":fbtn            "$_WELCOME_BROWSER https://discovery.endeavouros.com/category/installation"
    # --field=" $(ltr ins_trouble)!$user_info!$(ltr ins_troubletip)":fbtn      "$_WELCOME_BROWSER https://discovery.endeavouros.com/category/system-rescue"
      --field=" $(ltr ins_syslog)!$user_info!$(ltr ins_syslogtip)":fbtn        "$_WELCOME_BROWSER https://discovery.endeavouros.com/forum-log-tool-options/how-to-include-systemlogs-in-your-post"
#      --field=" $(ltr ins_logtool)!$icon!$(ltr ins_logtooltip)":fbtn           "eos-log-tool"
  )

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &

  # could use 'gparted' as the icon for gparted...
}

GeneralInfo() {
  local handle="$1"
  local tabnum="$2"
  IsInstalling && {
      local user_info=info
  }
  local tabcontents=(
      eos_yad --align-buttons
      --plug="$handle" --tabnum="$tabnum" --form --columns=2
      --image=dialog-question
      --text="<b>$(ltr general_info_text)</b>" --text-align=left
      --field=" $(ltr general_info_ws)!$user_info!https://endeavouros.com":fbtn          "$_WELCOME_BROWSER https://endeavouros.com"
      --field=" $(ltr general_info_wi)!$user_info!$(ltr general_info_witip)":fbtn        "$_WELCOME_BROWSER https://discovery.endeavouros.com"
      --field=" $(ltr general_info_ne)!$user_info!$(ltr general_info_netip)":fbtn        "$_WELCOME_BROWSER https://endeavouros.com/news"
      --field=" $(ltr general_info_fo)!$user_info!$(ltr general_info_fotip)":fbtn        "$_WELCOME_BROWSER https://forum.endeavouros.com"
      --field=" $(ltr general_info_do)!$user_info!$(ltr general_info_dotip)":fbtn        "$_WELCOME_BROWSER https://endeavouros.com/donate"
      --field=" $(ltr general_info_ab)!$user_info!$(ltr general_info_abtip)":fbtn        "$_WELCOME_BROWSER https://discovery.endeavouros.com/endeavouros-tools/welcome"
  )

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

w_WARN() {
    local msg="$1"
    shift
    eos_yad_WARN "$PRETTY_PROGNAME: ${FUNCNAME[1]}: $msg" --height=200 --width=500 "$@"
}
export -f w_WARN

RunIfInstalled() {
    # Usage: $FUNCNAME -a="app" [-p="pkg"] [app-parameters]

    local app="" pkg=""
    local opt

    while [ -n "$1" ] ; do
        opt="$1"
        case "$opt" in
            -a=*) app="${opt#*=}" ; shift ;;
            -p=*) pkg="${opt#*=}" ; shift ;;
            -*) w_WARN "unsupported option '$opt'" --text="Option unsupported" ; return 1 ;;
            *) break ;;
        esac
    done

    if [ -z "$app" ] ; then
        w_WARN "app parameter (required) is empty" --text="Application name is empty"
        return 1
    fi
    if [ -z "$(which "$app" 2> /dev/null)" ] ; then
        if [ -n "$pkg" ] ; then
            w_WARN "app '$app' (from package '$pkg') not found" --text="Application not installed" --width=600
        else
            w_WARN "app '$app' not found" --text="Application not installed"
        fi
        return 1
    fi

    "$app" "$@"
}
export -f RunIfInstalled

IconGrasp() {
    local app desktop icon

    for app in "$@" ; do
        icon=$(eos-FindAppIcon "$app")
        if [ -n "$icon" ] ; then
            echo "$icon"
            return
        fi
    done

    return 1

    # old stuff
    for app in "$@" ; do
        desktop=$(/usr/bin/find /usr/share/applications -name \*$app\*\.desktop | /usr/bin/head -n1)
        icon=$(/usr/bin/grep ^Icon= "$desktop" 2>/dev/null | /usr/bin/cut -d '=' -f2 | /usr/bin/head -n1)
        if [ -n "$icon" ] ; then
            echo "$icon"
            return
        fi
    done
    return 1
}

if [ 0 -eq 1 ] ; then
NothingToDo_other() {
    local text="$1"
    local timeout="$2"
    local sleep=$(echo "scale=3; $timeout*2/100" | bc -l)
    local ix
    for ((ix=0; ix<=100; ix+=2)) ; do
        echo $ix
        sleep 0.1
    done | eos_yad --progress --auto-close --width=200 --text="$text" --title="Info" --hide-text
}
export -f NothingToDo_other
fi

PacdiffFieldAdd() {
  local differs=("${EOS_WELCOME_PACDIFFERS[@]}")  # see /etc/eos-script-lib-yad.conf
  local differ Icon=preferences-system

#  [ "$XDG_SESSION_TYPE" = "wayland" ] && differs=(diffuse "${differs[@]}")
  for differ in "${differs[@]}" ; do
      if [ -x /usr/bin/$differ ] ; then
          case "$differ" in
              meld|code|vim)          Icon=$(IconGrasp "$differ") ;;
              kdiff3|kompare|diffuse) Icon=$differ ;;
          esac
          tabcontents+=(--field=" Pacdiff $_and $differ!$Icon!$(ltr after_install_pacdiff_tip) $differ":fbtn "eos-pacdiff --nt")
          break
      fi
  done
}
export -f PacdiffFieldAdd

UpdateWithAurHelper() {
    local helper="$1"
    local opts="-Syu --nocombinedupgrade"        # first pacman update, then AUR update
    declare -A has_updates
    local updates=""

    echo "$UPDT_UPDATE_CHECK"

    # check AUR updates
    updates="$($helper -Qua)"
    if [ -n "$updates" ] ; then
        has_updates[aur]=yes
    else
        has_updates[aur]=no
    fi

    # if no AUR updates, check pacman updates
    if [ "${has_updates[aur]}" = "no" ] ; then
        checkupdates > /dev/null
        case "$?" in
            0) has_updates[main]=yes ;;
            1) return 1 ;;                  # an error!
            2) has_updates[main]=no ;;
        esac
    fi

    [ "${has_updates[main]}" = "yes" ] && echo "Official updates available."
    [ "${has_updates[aur]}"  = "yes" ] && echo "AUR updates available."

    if [ "${has_updates[main]}" = "yes" ] || [ "${has_updates[aur]}" = "yes" ] ; then
        echo "\$ $helper $opts"
        $helper $opts
    else
        echo "$UPDT_NOTHING_TODO"
    fi
}
export -f UpdateWithAurHelper

AfterInstall() {
  local handle="$1"
  local tabnum="$2"

  local _exclamation='&#33;'   # '!'
  local _and='&#38;'           # '&'
  local _question='&#63;'      # '?'

  local tabcontents=(
      eos_yad --align-buttons
      --use-interp  # don't need explicit 'bash -c' construct when calling functions
      --plug="$handle" --tabnum="$tabnum" --form --image=dialog-information
      --text="<b>$(ltr after_install_text)</b>" --columns=2
  )
  if [ "$(eos_GetArch)" != "armv7h" ] ; then
      tabcontents+=(
          --field=" $(ltr after_install_um)!applications-internet!$(ltr after_install_umtip)":fbtn "RunIfInstalled -a=reflector-simple"
      )
  fi
  tabcontents+=(
      --field=" $(ltr after_install_us)!$system_software_update!$(ltr after_install_ustip)":fbtn "RunInTerminal UpdateInTerminal --lang=$lang"
      --field=" $(ltr after_install_pclean)!applications-system!$(ltr after_install_pcleantip)":fbtn 'paccache-service-manager'
  )

  if [ -x /usr/bin/eos-update-notifier-configure ] ; then
      tabcontents+=(--field=" $(ltr after_install_conf) eos-update-notifier!preferences-system!$(ltr after_install_conf) eos-update-notifier":fbtn "eos-update-notifier-configure")
  fi

  if [ "$(eos_GetArch)" != "armv7h" ] ; then
      tabcontents+=(--field=" $(ltr after_install_cdm)!preferences-desktop-display!$(ltr after_install_cdmtip)":fbtn 'yad_ChangeDisplayManager')
  fi

  ShowChangeResoButton

  tabcontents+=(
      --field=" $(ltr after_install_ew)!preferences-desktop-wallpaper!$(ltr after_install_ewtip)":fbtn    'eos-wallpaper-set DEFAULT'
      --field=" $(ltr after_install_ew2)!preferences-desktop-wallpaper!$(ltr after_install_ewtip2)":fbtn  'eos-wallpaper-set'
      --field=" $(ltr after_install_more_wall)!preferences-desktop-wallpaper!$(ltr after_install_more_wall_tip)":fbtn  'RunInTerminal eos-download-wallpapers'
  )
  if (IsR8168Card) ; then
      if [ -n "$(lsmod | grep r8169)" ] ; then
          tabcontents+=(
              --field=" Wired net issues$_question Try r8168 driver$_exclamation!$system_software_update!Changing to r8168 driver.":fbtn "ethernet_use_8168"
          )
      fi
  fi
  tabcontents+=(--field=" $(ltr ins_logtool)!face-worried!$(ltr ins_logtooltip)":fbtn  "eos-log-tool" )
  case "$(eos_yad_GetDesktopName)" in
      XFCE)
          tabcontents+=(
              --field=" $(ltr after_install_themevan)!preferences-desktop-theme!$(ltr after_install_themevantip)":fbtn  'yad_vanilla_xfce4_theme'
              --field=" $(ltr after_install_themedef)!preferences-desktop-theme!$(ltr after_install_themedeftip)":fbtn  'yad_endeavouros_xfce4_theme'
          )
          ;;
  esac
  VboxGuestEnable
  tabcontents+=(--field=" $(ltr after_install_itab)!preferences-system!$(ltr after_install_itab_tip)":fbtn "bash -c WelcomeInitialTab")

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

DailyAssistant() {
  local handle="$1"
  local tabnum="$2"

  local _exclamation='&#33;'   # '!'
  local _and='&#38;'           # '&'

  local tabcontents=(
      eos_yad --align-buttons --use-interp  # don't need explicit 'bash -c' construct when calling functions
      --plug="$handle" --tabnum="$tabnum" --form --image=dialog-information
      --text="<b>$(ltr daily_assistant_text)</b>" --columns=2
      --field=" $(ltr after_install_us)!$system_software_update!$(ltr after_install_ustip)":fbtn "RunInTerminal UpdateInTerminal --lang=$lang"
  )
  if [ "$EOS_WELCOME_USE_AUR_HELPERS_TESTING" = "yes" ] ; then
      if [ -x /usr/bin/yay ] ; then
          tabcontents+=(
              --field=" $(ltr after_install_us) (yay)!$system_software_update!$(ltr after_install_ustip)":fbtn "RunInTerminal UpdateWithAurHelper yay"
          )
      fi
      if [ -x /usr/bin/paru ] ; then
          tabcontents+=(
              --field=" $(ltr after_install_us) (paru)!$system_software_update!$(ltr after_install_ustip)":fbtn "RunInTerminal UpdateWithAurHelper paru"
          )
      fi
  fi
  if [ "$(eos_GetArch)" != "armv7h" ] ; then
      tabcontents+=(
          --field=" $(ltr after_install_um)!applications-internet!$(ltr after_install_umtip)":fbtn "RunIfInstalled -a=reflector-simple"
      )
  fi
  PacdiffFieldAdd
  tabcontents+=(
      --field=" $(ltr ins_logtool)!face-worried!$(ltr ins_logtooltip)":fbtn  "eos-log-tool"
  )
  IsInstalled eos-apps-info && {
      tabcontents+=(
	  --field=" EndeavourOS apps help!endeavouros-icon!Show manual pages of EndeavourOS apps":fbtn "/usr/bin/eos-apps-info"
      )
  }

  # General app browsing buttons:
  if [ "$(eos_GetArch)" = "armv7h" ] ; then
      tabcontents+=(
          --field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "$_WELCOME_BROWSER https://www.archlinuxarm.org/packages"
      )
  else
      tabcontents+=(
          --field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "$_WELCOME_BROWSER https://www.archlinux.org/packages"
      )
  fi
  tabcontents+=(
      --field=" $(ltr add_more_apps_aur)!!$( ltr add_more_apps_done2_tip2)":fbtn "$_WELCOME_BROWSER https://aur.archlinux.org/packages"
      --field=" $(ltr daily_assist_apps)!!$(ltr daily_assist_apps_tip)":fbtn "$_WELCOME_BROWSER https://wiki.archlinux.org/title/List_of_applications"
  )

  local DEname="$(eos_GetDeOrWm)"
  case "$(eos_yad_GetDesktopName)" in
      XFCE)         DEname=Xfce;;
      BUDGIE)       DEname=Budgie;;
      CINNAMON)     DEname=Cinnamon;;
      LXQT)         DEname=LXQt;;
      I3)           DEname=i3;;
      BSPWM)        DEname=bspwm;;
      SWAY)         DEname=sway;;
      GNOME3)       DEname=GNOME;;
      GNOME|KDE|MATE) ;;
      *)            DEname="";;
  esac
  if [ -n "DEname" ] ; then
      tabcontents+=(
          --field=" $DEname: $(ltr daily_assist_DEinfo)!!$DEname: $(ltr daily_assist_DEinfo_tip)":fbtn   "$_WELCOME_BROWSER https://wiki.archlinux.org/title/$DEname"
      )
  fi

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

WelcomeInitialTab() {
    ## Welcome tabs are numbered starting from 1.
    ## Note1: This setting is not used while installing.
    ## Note2: This overrides the related setting 'activate_own_commands_tab'
    ##        or the first parameter in call to personal_commands_init()
    ##        in file ~/.config/welcome-own-cmds.conf.

    if [ ! -r "$welcome_configurator" ] ; then
        echo "EOS_WELCOME_ACTIVE_TAB_NUMBER=2  # default: 2 (=After Install)" > $welcome_configurator
    fi
    source "$welcome_configurator"
    [ -z "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] && export EOS_WELCOME_ACTIVE_TAB_NUMBER=2

    local count="$_NOTEBOOK_TABS_COUNT"
    local txt=""
    txt+="Welcome tabs are numbered from 1 to $count.\n"
    txt+="For example, the <b>After Install</b> tab is number 2.\n"
    txt+="Select the number of the Welcome tab to show initially.\n"
    txt+="After selecting the initial tab, Welcome will be restarted.\n"
    local cmd=(
        eos_yad --form --align-buttons --use-interp --title="Welcome initial tab"
        --text="$txt" --image=system-preferences
        --field="Initial tab number\t\t":num "$EOS_WELCOME_ACTIVE_TAB_NUMBER!1..$count!1"
    )
    local result="$("${cmd[@]}" | cut -d '|' -f1)"
    [ -z "$result" ] && return
    sed -i $welcome_configurator -e "s|^EOS_WELCOME_ACTIVE_TAB_NUMBER=[0-9]*|EOS_WELCOME_ACTIVE_TAB_NUMBER=$result|"

    local tmpfile=$(mktemp $HOME/.cache/.greeter_restart.XXXXX)
    cat <<EOF > $tmpfile
pkill -f "/usr/bin/yad --window-icon=$EOS_WICON"
sleep 0.2
eos-welcome ${WELCOME_ARGS} &
sleep 0.5
rm -f $tmpfile
EOF
    chmod +x $tmpfile
    $tmpfile
}
export -f WelcomeInitialTab

Github2Gitlab() {
    eos-github2gitlab "$@"
}
export -f Github2Gitlab

UsefulTips() {
  local handle="$1"
  local tabnum="$2"
  local _and='&#38;'           # '&'


  local tabcontents+=(
      eos_yad --align-buttons
      --plug="$handle" --tabnum="$tabnum" --form --columns=2
      --image=$user_info
      --text="<b>$(ltr useful_tips_text)</b>"
      --field=" $(ltr after_install_pm)!$user_info!$(ltr after_install_pmtip)":fbtn     "$_WELCOME_BROWSER 'https://discovery.endeavouros.com/?s=pacman'"
      --field=" $(ltr after_install_ay)!$user_info!$(ltr after_install_aytip)":fbtn     "$_WELCOME_BROWSER 'https://discovery.endeavouros.com/category/aur'"
      --field=" $(ltr after_install_hn)!$user_info!$(ltr after_install_hntip)":fbtn     "$_WELCOME_BROWSER 'https://discovery.endeavouros.com/?s=Hardware'"
      --field=" $(ltr after_install_bt)!$user_info!$(ltr after_install_bttip)":fbtn     "$_WELCOME_BROWSER 'https://discovery.endeavouros.com/bluetooth'"
  )
  test "$(eos_GetArch)" != "armv7h" && \
      tabcontents+=(--field=" $(ltr after_install_nv)!$user_info!$(ltr after_install_nvtip)":fbtn "$_WELCOME_BROWSER https://discovery.endeavouros.com/category/nvidia")
  tabcontents+=(
      --field=" $(ltr after_install_ft)!$user_info!$(ltr after_install_fttip)":fbtn     "$_WELCOME_BROWSER https://discovery.endeavouros.com/forum-log-tool-options/how-to-include-systemlogs-in-your-post"
      --field=" EndeavourOS $_and ARM!system-run!EndeavourOS $_and ARM $(ltr after_install_info)":fbtn      "$_WELCOME_BROWSER https://arm.endeavouros.com"
      --field=" $(ltr butt_owncmds_help)!$user_info!$(ltr nb_tab_owncmdstip)":fbtn      "$_WELCOME_BROWSER $(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/blob/master/welcome/Adding-own-commands.md)"
      --field=" $(ltr butt_owncmds_dnd)!$EOS_WICON!$(ltr butt_owncmds_dnd_help)":fbtn   "welcome-dnd"
  )

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

IsEosYadInstalled() {
    # Determines if yad-eos is installed.
    # Some yad alternative must be installed if we can use this program!

    local installed_yad="$(LANG=C /usr/bin/pacman -Qi yad 2>/dev/null | /usr/bin/grep -w ^Name | /usr/bin/awk '{print $3}')"

    if [ "$installed_yad" = "yad-eos" ] ; then
        return 0        # yad-eos is installed
    else
        return 1        # some other yad alternative is installed
    fi
}

AddMoreApps() {
  local handle="$1"
  local tabnum="$2"

  local shown_app_buttons=0
  local DE="$(eos_yad_GetDesktopName)"

  local gufw="$(IconGrasp gufw network-firewall firewall-config)"
  local libreoffice="$(IconGrasp libreoffice-writer)"
  local chromium="$(IconGrasp chromium web-browser)"

  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form --text-align=left --columns=2
      --image=$system_software_install
  )
  IsInstalled libreoffice-fresh || {
      ((shown_app_buttons++))
      tabcontents+=( --field=" LibreOffice!$libreoffice!$(ltr add_more_apps_lotip)":fbtn 'yad_Install libreoffice-fresh')
  }
  IsInstalled chromium || {
      ((shown_app_buttons++))
      tabcontents+=(--field=" $(ltr add_more_apps_ch)!$chromium!$(ltr add_more_apps_chtip)":fbtn 'yad_Install chromium')
  }
  IsInstalled gufw || {
      ((shown_app_buttons++))
      tabcontents+=(--field=" $(ltr add_more_apps_fw)!$gufw!$(ltr add_more_apps_fwtip)":fbtn 'yad_Install gufw')
  }

  if [ "$(eos_GetArch)" != "armv7h" ] ; then
      IsInstalled akm || {
          ((shown_app_buttons++))
          tabcontents+=(--field=" $(ltr add_more_apps_akm)!$system_software_install!$(ltr add_more_apps_akmtip)":fbtn 'yad_Install akm')
      }
  fi
  IsInstalled eos-apps-info || {
      ((shown_app_buttons++))
      tabcontents+=(--field=" EndeavourOS apps info!$system_software_install!Show info about EndeavourOS apps":fbtn 'yad_Install eos-apps-info')
  }
  case "$DE" in
    XFCE)
        while true ; do                       # Show buttons only if none of them are installed.
            IsInstalled blueberry && break
            IsInstalled blueman && break
            ((shown_app_buttons+=2))
            local bluetooth="$(IconGrasp bluetooth)"
            tabcontents+=(
                --field=" $(ltr add_more_apps_bt)!$bluetooth!Blueberry":fbtn                   'yad_Install blueberry bluez-utils'
                --field=" $(ltr add_more_apps_bt_bm)!$bluetooth!Blueman":fbtn                  'yad_Install blueman bluez-utils pulseaudio-bluetooth'
            )
            break
        done
        ;;
  esac

  if (! IsEosYadInstalled) ; then
      tabcontents+=(--field=" Yad (patched)!$(yad-tools -i yad)!Patched version of yad fixes the window height issue":fbtn "yad_Install yad-eos")
  fi

  # General app browsing buttons:
  if [ "$(eos_GetArch)" = "armv7h" ] ; then
      tabcontents+=(--field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "$_WELCOME_BROWSER https://www.archlinuxarm.org/packages")
  else
      tabcontents+=(--field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "$_WELCOME_BROWSER https://www.archlinux.org/packages")
  fi
  tabcontents+=(--field=" $(ltr add_more_apps_aur)!!$( ltr add_more_apps_done2_tip2)":fbtn "$_WELCOME_BROWSER https://aur.archlinux.org/packages")
  
  # Now we know if we have any apps in the install list.

  if [ $shown_app_buttons -eq 0 ] ; then
      tabcontents+=(--text="<b>$(ltr add_more_apps_done1_text)$(ltr add_more_apps_done2_text)</b>")
  else
      tabcontents+=(--text="<b>$(ltr add_more_apps_text) $(ltr add_more_apps_done2_text)</b>")
  fi

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

#### Support for personal commands:

personal_commands_add() {   # add one personal command
    local commandline="$1"
    local name="$2"
    local icon="$3"
    local description="$4"
    local cmd="$5"

    [ -n "$description" ] || description="$commandline"
    [ -n "$cmd" ] || cmd="$(echo "$commandline" | /usr/bin/awk '{print $1}')"

    if (/usr/bin/which $cmd &> /dev/null) ; then
        welcome_own_commands+=(--field=" $name!$icon!$description":fbtn "$commandline")
    else
        printf "%s: %s\n    %s\n" "$(/usr/bin/date "+%x %X")" "$FUNCNAME:" "warning: command '$cmd' not found" >> /tmp/welcome-personal-commands.log
        echo "$FUNCNAME: warning: command '$cmd' not found" >&2
    fi
}

personal_commands_init() {  # initialize user settings for personal commands
    [ -n "$1" ] && activate_own_commands_tab="$1"
    [ -n "$2" ] && columns_for_own_commands="$2"
    [ -n "$3" ] && show_predefined_buttons_at_own_commands="$3"
}

_align_buttons_on_tab() {
    # handles old _align() marking in ~/.config/welcome-own-cmds.conf

    local -n arr="$1"
    local handle="$2"
    local ix xx

    # just remove possible legacy "_align(...) construct"
    ix=0
    for xx in "${arr[@]}" ; do
        case "$xx" in
            --field=*)
                if [ "$xx" != "${xx/*_align(/}" ] ; then
                    arr[$ix]="$(echo "$xx" | sed 's|_align(\(.*\))!| \1!|')"
                fi
                ;;
        esac
        ((ix++))
    done
}

OwnCommands() {
  local handle="$1"
  local tabnum="$2"
  local cols="$columns_for_own_commands"
  local show_buttons="$show_predefined_buttons_at_own_commands"

  case "$show_buttons" in
      no) ;;
      *) show_buttons=yes ;;
  esac

  while true ; do
      if [ -z "$cols" ] ; then
          cols=2
      elif [ -n "$(echo "$cols" | tr -d '0-9')" ] ; then
          cols=2
          echo "Warning: value '$columns_for_own_commands' for variable 'columns_for_own_commands' is unsupported, using $cols." >&2
      elif [ $cols -lt 1 ] || [ $cols -gt 20 ] ; then
          cols=2
          echo "Warning: value '$columns_for_own_commands' for variable 'columns_for_own_commands' is unsupported, using $cols." >&2
      fi
      break
  done

  local tabcontents=(
      eos_yad --align-buttons
      --plug="$handle" --tabnum="$tabnum" --form --columns=$cols
      --image=applications-other
      --text="<b>$(ltr nb_tab_owncmds_text)</b>"
  )
  if [ "$show_buttons" = "yes" ] ; then
      tabcontents+=(
          --field=" $(ltr butt_owncmds_help)!$user_info!$(ltr nb_tab_owncmdstip)":fbtn
                  "$_WELCOME_BROWSER $(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/blob/master/welcome/Adding-own-commands.md)"
          --field=" $(ltr butt_owncmds_dnd)!$EOS_WICON!$(ltr butt_owncmds_dnd_help)":fbtn  "welcome-dnd"
      )
  fi
  tabcontents+=("${welcome_own_commands[@]}")

  _align_buttons_on_tab tabcontents "$handle"

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}


# Fields explanation:
# --field="ButtonName!IconName!Tooltip":fbtn "Command"

### These variables are required:

CreateNotebookCommands() {
    IsInstalling && {
        _NOTEBOOK_TABS=(                             # names of functions above
            INSTALL
            GeneralInfo
        )
    } || {
        _NOTEBOOK_TABS=(                             # names of functions above
            GeneralInfo
            AfterInstall
            DailyAssistant
            UsefulTips
            AddMoreApps
        )
    }
    if [ -n "$welcome_own_commands" ] ; then
        _NOTEBOOK_TABS+=(OwnCommands)
    fi
    export _NOTEBOOK_TABS_COUNT=${#_NOTEBOOK_TABS[@]}
}

####################### DO NOT CHANGE ANYTHING AFTER THIS LINE! ######################################################

DIE() {
    local title="Error"
    while true ; do
        echo "Error: $1."
        Usage
        break
    done | eos_yad_problem "$title" --fontname="Mono 10" --height=700 "$@"
    exit 1
}

WelcomeHelp() {
    Usage | eos_yad --text-info --title="$WH_BUTT_TITLE" --width=700 --height=500 \
                    --fontname="Mono 10" \
                    --text="<b>$WH_BUTT_TEXT</b>" \
                    --text-align=left \
                    --image=help-about --button=yad-ok:0
}
export -f WelcomeHelp

WelcomeChangelog() {
    $_WELCOME_BROWSER $(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/commits/master/welcome)
}
export -f WelcomeChangelog

ImportantNews() {
    $_WELCOME_BROWSER "$(Github2Gitlab https://github.com/endeavouros-team/Important-news/blob/main/README.md)"
}
export -f ImportantNews

SetBrowser() {
    local xx
    [ -n "$_WELCOME_BROWSER" ] && return
    export _WELCOME_BROWSER="$(eos_select_browser)"
}
export -f SetBrowser

PrepareTabs() {
    local handle="$1"
    local xx ix

    ix=1
    for xx in "${_NOTEBOOK_TABS[@]}" ; do
        $xx "$handle" "$((ix++))" "$xx"
    done
}

SeparateWordsWithSpaces() { # add a space before a capital letter inside a word
    local tabname="$1"

    if [ "$(echo "$tabname" | tr -d '[a-z]')" = "$tabname" ] ; then
        echo "$tabname"           # all capital letters ==> don't change
    else
        echo "$tabname" | sed -e 's|\([A-Z]\)| \1|g' -e 's|^ ||'  # add space before capital letters
    fi
}


WelcomeSettings() {
    local value="$1"   # enable, disable, check
    declare -A defaults
    local xx

    defaults[Greeter]="Greeter=enable"
    defaults[LastCheck]="LastCheck=0"
    defaults[OnceDaily]="OnceDaily=no"

    # Make sure we have sensible initial values in the config file.
    if [ ! -r "$WELCOME_CONFIG" ] ; then
        cat <<EOF > "$WELCOME_CONFIG"
## Configuration file for $PROGNAME.
# Note: using bash syntax.
#
# 'Greeter'   values: enable or disable.
# 'OnceDaily' values: no or yes; yes means $PROGNAME is shown only once a day.
# 'LastCheck' values: automatically filled by $PROGNAME.

EOF
    fi

    for xx in Greeter OnceDaily LastCheck ; do
        if [ -z "$(grep "^${xx}=" "$WELCOME_CONFIG" 2>/dev/null)" ] ; then
            echo "${defaults[$xx]}" >> "$WELCOME_CONFIG"
        fi
    done

    # Now the initial values are in order.

    case "$value" in
        enable | disable)
            sed -i "$WELCOME_CONFIG" -e 's|^Greeter=.*$|Greeter='"$value"'|'
            ;;
    esac

    case "$value" in
        disable)
            echo "$(ltr settings_dis_contents)" | \
                eos_yad --text-info --image=dialog-information --text="$(ltr settings_dis_text)" \
                        --title="$(ltr settings_dis_title)" \
                        --geometry=500x200 --wrap \
                        --fontname="Monospace Regular 12" \
                        --button=" $(ltr settings_dis_butt)!face-angel!$(ltr settings_dis_buttip)":0 >& /dev/null
            ;;
        check)
            grep "^Greeter=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2
            ;;
        continue)
            # IsInstalling && { echo yes ; return ; }  # not needed, installer has default values
            if [ "$(grep "^OnceDaily=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2)" = "no" ] ; then
                echo yes
                return
            fi
            local date="$(date +%Y%m%d)"
            if [ "$(grep "^LastCheck=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2)" = "$date" ] ; then
                echo "Info: Stopping because of setting OnceDaily=yes in file $WELCOME_CONFIG." >&2
                echo no
            else
                echo yes
            fi
            sed -i "$WELCOME_CONFIG" -e 's|^LastCheck=.*$|LastCheck='"$date"'|'
            ;;
    esac
}

IsR8168Card() {
    # Return 0 if ethernet card is realtek 8168.

    if [ 0 -eq 1 ] && [ "$testing" = "yes" ] ; then   # this is only for testing
        return 0
    fi

    if [ -n "$(/usr/bin/lspci | /usr/bin/grep -w Ethernet | /usr/bin/grep -w 8168)" ] ; then
        return 0
    else
        return 1
    fi
}
export -f IsR8168Card

ethernet_use_8168() {
    local cmds=""
    cmds+="echo blacklist r8169 > /usr/lib/modprobe.d/r8168.conf"
    cmds+="; modprobe -r r8169 2>/dev/null"
    cmds+="; modprobe r8168"
    cmds+="; systemctl restart NetworkManager"

    if (! IsInstalled r8168) ; then
        if (eos-connection-checker) ; then
            cmds="pacman -S r8168; $cmds"
        else
            w_WARN "sorry, cannot install r8168 because there's no internet connection."
            return 1
        fi
    fi
    RunInTerminal "$EOS_ROOTER '$cmds'"
}
export -f ethernet_use_8168

MagicId() {
    local ENDEAVOUROS_TEAM=https://raw.githubusercontent.com/endeavouros-team
    if (! IsInstalling) ; then
        echo "Sorry, option --id is only an install feature." >&2
        return 1
    fi
    local id="$1"
    if [ -z "$id" ] ; then
        echo "Id value missing." >&2
        return 1
    fi
    local target=$HOME/user_pkglist.txt
    local time
    local data="$(curl -s $ENDEAVOUROS_TEAM/sandbox/master/pkg/list)"
    if [ -z "$data" ] ; then
        echo "Error: list not found." >&2
        return 1
    fi
    local url="$(echo "$data" | grep "^$id=" | sed "s|^$id=||")"
    if [ -z "$url" ] ; then
        echo "Id '$id' not found." >&2
        return 1
    fi
    if [ -r $target ] ; then
        time=$(date +%Y%m%d-%H%M-%S)
        echo "Moving existing $target to $target.$time" >&2
        mv $target $target.$time
    fi
    if (! wget -q -O $target "$url") ; then
        echo "Sorry, URL '$url' not found. " >&2
        [ -r $target.$time ] && mv $target.$time $target
        return 1
    fi
    case "$id" in
        ma) if (! wget -q "$ENDEAVOUROS_TEAM/sandbox/master/pkg/pkglist_install.sh") ; then
                echo "Warning: cannot fetch pkglist_install.sh from sandbox" >&2
                return 1
            fi
            sudo cp pkglist_install.sh /usr/lib/calamares/modules/user_pkglist/
            ;;
    esac
    echo "$target: OK" >&2
}

ShowProgress() {
    [ "$show_progress_bar" = "yes" ] || return

    local msg="$1"
    local barlen=50
    local percent_increment=17

    ProgressBar "$msg" $pb_percent $barlen
    ((pb_percent+=percent_increment))
    [ $pb_percent -gt 100 ] && pb_percent=100
}
EndProgress() {
    [ "$show_progress_bar" = "yes" ] || return
    pb_percent=100
    ShowProgress "Done."
    ProgressBarEnd
}

VboxGuestEnable() {
    if [ -n "$(systemctl status vboxservice 2>/dev/null | grep "inactive (dead)")" ] ; then
        local label="$(ltr after_install_vbox1)"
        local msg1="$(ltr after_install_vbox2)"
        local cmd="systemctl enable --now vboxservice.service"
        local msgvb="$msg1\n<b>$label</b>"
        local icon=user-info
        eos_yad --form --title="Info" --text="$msgvb" --image=$icon --button=yad-quit:0 &
        tabcontents+=(--field=" $label!preferences-system!$cmd":fbtn "RunInTerminal $cmd")
    fi
}

KillExtraYad() {
    sleep 0.2
    eos-kill-yad-zombies
}

Usage() {
    cat <<EOF
===== $PROG_PACKAGENAME $PROG_VERSION =====

Usage: $PROGNAME [options]

Options:
--startdelay=X    Wait before actually starting this app.
                  X value syntax is the same as in 'sleep'.
--enable | -f     Enable this $PRETTY_PROGNAME app.
--disable         Disable this $PRETTY_PROGNAME app.
--version         Show the version of this app.
--lang=X          Use language X on the user interface.
--changelog       Show the changelog of this package.

Experimental options:
--genlang=X       Generate language X support for the user interface of the Welcome app.
                  X is a shorthand of two lowercase letters, like de, en, or fr.
                  Note: requires package 'translate-shell' to be already installed.
                  Try command 'trans -R' to see a list of available languages.

To have $PRETTY_PROGNAME app started when you log in, make sure
- $PRETTY_PROGNAME app is selected in the Autostart feature of the DE
    OR
- "Hidden=false" is set in file /etc/xdg/autostart/welcome.desktop

On DEs that do not work well with Autostart:
You may also disable the $PRETTY_PROGNAME app from the app itself
- with the --disable option
- with a button in the app (some DEs only)

To re-enable the app, use the terminal command
    $PROGNAME --enable

Note: check also settings in the configuration file $WELCOME_CONFIG.

Option --lang=X is currently experimental and supports only a very small set
of languages. The X should consist of two lowercase letters
(like 'en' for English or 'de' for German).
If option --lang is not given, the (default) value is extracted from
the first two letters of the environment variable LANG.
EOF
}
export -f Usage
# --tr-prefer=X     Prefer either 'manual' or 'generated' language on the user interface.
#                   Note: value 'generated' is meaningful only after option --genlang has
#                   been used at least once.

#Install time options:
#--pkglist=URL     User can give an URL to a file that contains a list of additional packages
#                  to install. Package names are listed as one package name per line.
#                  Empty lines and comments (lines starting with character #) are allowed.


StartHere() {
    local arg lang
    local yad_zombie_log=/tmp/yad-zombies.log
    local tr_engine=bing
    local tr_prefer=manual
    local pb_percent=0
    local show_progress_bar=no   # was: yes
    local testing=no

    local welcome_own_commands=()
    local activate_own_commands_tab="no"
    local columns_for_own_commands="2"
    local show_predefined_buttons_at_own_commands="yes"

    [ -z "$EOS_FILESERVER_SITE" ] && EOS_FILESERVER_SITE="gitlab"

    export WELCOME_ARGS="$*"
    export EOS_FILESERVER_SITE

    # common button icons
    local user_info="$(IconGrasp user-info)"
    local system_software_update="$(IconGrasp system-software-update)"
    local system_software_install="$(IconGrasp system-software-install)"

    for arg in "$@" ; do
        case "$arg" in
            --no-progress)
                show_progress_bar=no
                ;;
            --changelog)
                WelcomeChangelog
                return
                ;;
            --lang=*) lang="${arg#*=}" ;;
            --tr-engine=*) tr_engine="${arg#*=}" ;;
            --tr-prefer=*) tr_prefer="${arg#*=}" ;;
            --id=*) MagicId "${arg#*=}" || return 0 ;;
            --genlang=*)
                lang="${arg#*=}"
                _init_translations --tr-engine="$tr_engine" --generate "$lang"
                return
                ;;
        esac
    done

    [ "$show_progress_bar" = "yes" ] && ProgressBarInit

    ShowProgress Translating...

    _init_translations --tr-prefer="$tr_prefer" "$lang" || { echo "language fail" >&2 ; exit 1 ; }

    AfterTranslations

    KillExtraYad > /tmp/yad-zombies.log

    ShowProgress Processing...

    local WELCOME_CONFIG="$HOME/.config/EOS-greeter.conf"     # "Welcome" used to be "Greeter" ...
    export welcome_configurator="$HOME/.config/welcome.conf"  # another welcome config... should combine these

    if [ -r "$welcome_configurator" ] ; then
        if [ -n "$(grep "^local ConfVersion" "$welcome_configurator")" ] || [ -n "$(grep "^local MaxButtonNameLength" "$welcome_configurator")" ] ; then
            # this is an old config file, just delete the file
            rm -f "$welcome_configurator"
        fi
    fi

    if [ -r "$welcome_configurator" ] ; then
        source "$welcome_configurator"
    fi
    if [ -z "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] ; then
        EOS_WELCOME_ACTIVE_TAB_NUMBER=2
    fi
    export EOS_WELCOME_ACTIVE_TAB_NUMBER

    export show_installer=no    # explicitly show the installer, for testing only
    export user_pkglist_url=""
    local start_delay=0
    local is_installing
    local _NOTEBOOK_TITLE="$PRETTY_PROGNAME v$PROG_VERSION"        # main window title

    #local netlog=0

    for arg in "$@" ; do
        case "$arg" in
            --help|-h) WelcomeHelp ; return ;;
            --enable|-f) WelcomeSettings enable ;;
            --disable)   WelcomeSettings disable ; return ;;
            --startdelay=*) start_delay="${arg#*=}" ;;
            --installer) export show_installer=yes ;;
            #--pkglist=*) export user_pkglist_url="${arg#*=}" ;;        # only for online installs currently
            --version) echo "$PROG_VERSION" >&2 ; return ;;
            --lang=* | --tr-prefer=* | --tr-engine=* | --id=* | --no-progress) ;; # already handled!
            --testing) testing=yes ;;
            #--netlog) netlog=1 ;;
            -*) DIE "unsupported option '$arg'" ;;
            *)  DIE "unsupported parameter '$arg'" ;;
        esac
    done
    export WELCOME_LANG="$lang"

    if [ "$(WelcomeSettings continue)" = "no" ] ; then
        return
    fi

    local own_commands_conf="$HOME/.config/welcome-own-cmds.conf"

    if [ -r    "$own_commands_conf" ] ; then
        source "$own_commands_conf"
    fi

    ShowProgress "Creating commands..."

    CreateNotebookCommands

    if [ "$(WelcomeSettings check)" != "enable" ] ; then
        ltr2 welcome_disabled
        return
    fi

    IsInstalling
    test $? -eq 0 && is_installing=yes || is_installing=no

    if [ "$start_delay" != "0" ] ; then
        ShowProgress "Sleeping..."
        sleep "$start_delay"
    fi

    if [ "$is_installing" = "no" ] ; then
        local verbosity
        if [ "$EOS_WELCOME_CONNECTION_WARNING" = "yes" ] ; then
            verbosity=verbose
        else
            verbosity=none
        fi
        ShowProgress "Checking connection..."

        eos_yad_check_internet_connection $verbosity 2 "3s" "Welcome" || return 1

        if [ -n "$TERMINAL_AT_START" ] ; then
            arg="$(echo "$TERMINAL_AT_START" | awk '{print $1}')"
            which "$arg" 2>/dev/null && {
                $TERMINAL_AT_START &
            } || {
                echo "Warning: terminal '$arg' (setting TERMINAL_AT_START) in file /etc/eos-script-lib-yad.conf is not supported." >&2
            }
        fi
    else
        eos-kbd-set
        if [ -r /etc/pacman.d/mirrorlist ] && [ ! -r /tmp/mirrorlist.bu ] ; then
            cp /etc/pacman.d/mirrorlist /tmp/mirrorlist.bu  # to be checked by update-mirrorlist
        else
            Welog "Warning: cannot make a backup of mirrorlist!"
        fi
        #if [ -z "$(grep '=/usr/share/endeavouros/scripts/welcome' /home/$EOS_LIVEUSER/.config/xfce4/panel/launcher-*/*.desktop)" ] ; then
        #    xfce4-panel --add=launcher $EOS_SCRIPTS_DIR/welcome-panel.desktop
        #fi
    fi

    SetBrowser

    local handle="$(shuf -i 700000-999999 -n 1)"
    local tab tabname
    local notebook   # contains the main yad command

    ShowProgress "Building yad window..."
    PrepareTabs "$handle" || DIE "PrepareTabs failed"

    # Create the yad command gradually into an array 'notebook':

    notebook=(eos_yad --notebook --key="$handle" --center --title="$_NOTEBOOK_TITLE")
    notebook+=(--use-interp)
    notebook+=(--expand)

    for tab in "${_NOTEBOOK_TABS[@]}" ; do
        tabname="$(ltr nb_tab_$tab)"
        #tabname="$(SeparateWordsWithSpaces "$tabname")"
        notebook+=(--tab="$tabname")
    done

    # Set the active tab number.
    local active_tab_nr=2                             # 2 = the After Install tab
    if [ "$is_installing" = "yes" ] ; then
        active_tab_nr=1
    elif [ -n "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] ; then
        active_tab_nr=$EOS_WELCOME_ACTIVE_TAB_NUMBER
    else
        if [ -n "$welcome_own_commands" ] ; then
            # 'activate_own_commands_tab' may have been set
            # in the "$own_commands_conf" file
            case "$activate_own_commands_tab" in
                [Yy][Ee][Ss])
                    active_tab_nr=6                       # 6 = the Personal Commands tab
                    #test "$is_installing" = "yes" && active_tab_nr=3
                    ;;
            esac
        fi
    fi
    notebook+=(--active-tab=$active_tab_nr)

    notebook+=(--button=" $(ltr butt_softnews)!applications-development!$(ltr butt_softnews_tip)":"ImportantNews")
    notebook+=(--button=" $(ltr butt_changelog)!applications-development!$(ltr butt_changelogtip)":"WelcomeChangelog")
    case "$EOS_WELCOME_HAS_SEE_YOU_LATER_BUTTON" in
        yes)
            notebook+=(--button=" $(ltr butt_help)!help-contents!":"WelcomeHelp")
            if [ "$is_installing" = "no" ] ; then
                notebook+=(--button=" $(ltr butt_noshow)!face-crying!$(ltr butt_noshow)":5)
            fi
            notebook+=(--button=" $(ltr butt_later)!face-cool!$(ltr butt_latertip)":0)
            ;;
        no|*)
            if [ "$is_installing" = "no" ] ; then
                notebook+=(--button=" $(ltr butt_noshow)!face-crying!$(ltr butt_noshow)":5)
            fi
            notebook+=(--button=" $(ltr butt_help)!help-contents!":"WelcomeHelp")
            ;;
    esac

    ShowProgress "Showing window..."

    local error_log=/tmp/$PROGNAME.log
    local comment=""

    "${notebook[@]}"

    local result=$?

    EndProgress

    case "$result" in
        5) WelcomeSettings disable ;;
        0|252) sleep 0.5 ; WelcomeSettings enable ;;
        *)
            case "$result" in
                143) comment="   # likely caused by restarting the Welcome app" ;;
            esac
            echo "$(/usr/bin/date "+%x %X"): welcome exit code was: $result$comment" >> $error_log
            ;;
    esac
}

trap "sleep 0.2 ; eos-kill-yad-zombies --silent" EXIT

StartHere "$@"

exit 0
